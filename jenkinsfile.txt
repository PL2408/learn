------------------docker rmi -f \$(docker images |grep -v nginx |awk 'NR>1 {print \$3}'|uniq) ||true-----------------------------


grep -v nginx: ця команда відфільтровує будь-які зображення, які містять рядок «nginx».

awk 'NR>1 {print \$3}': ця команда використовує команду "awk", щоб надрукувати третій стовпець результату (який містить ідентифікатор зображення), але пропускає перший рядок (який містить заголовки стовпців).

uniq: ця команда видаляє будь-які повторювані ідентифікатори зображень.

\$(...): ця команда замінює вихідні дані попередніх команд на основну команду Docker, яку виконує Docker.

docker rmi -f: ця команда примусово видаляє вказані зображення Docker.

|| true: ця команда гарантує, що навіть якщо попередня команда не вдасться (наприклад, якщо не знайдено жодного зображення), загальна команда не завершиться помилкою та поверне успішний код виходу.

Таким чином, загальний ефект цієї команди полягає у видаленні всіх зображень Docker, крім тих, які містять рядок «nginx».




--------------------docker build -t lopihara/devopsik-page:latest -t lopihara/devopsik-page:${MJ_VERSION}.'${BUILD_NUMBER}'-------


-t lopihara/devopsik-page:latest: цей параметр визначає назву та тег для образу Docker. У цьому випадку зображення позначено назвою «lopihara/devopsik-page» і тегом «останнє».

-t lopihara/devopsik-page:${MJ_VERSION}.'${BUILD_NUMBER}': цей параметр визначає додатковий тег для образу Docker. Тег створено з використанням значень двох змінних середовища: "MJ_VERSION" і "BUILD_NUMBER". Значення "MJ_VERSION" включено в тег як є, тоді як значення "BUILD_NUMBER" взято в одинарні лапки, щоб запобігти інтерпретації його як змінної оболонки.

Таким чином, загальний результат цієї команди полягає в тому, щоб створити образ Docker і позначити його двома назвами: «lopihara/devopsik-page:latest» і «lopihara/devopsik-page:${MJ_VERSION}.${BUILD_NUMBER}». Це дозволяє легко посилатися на зображення за допомогою імені або тегу.





------------docker run -d -it --rm --name devopsik-page -p 80:80 lopihara/devopsik-page:${MJ_VERSION}.'${BUILD_NUMBER}'------------


-it: цей параметр повідомляє Docker виділити інтерактивний псевдотермінал для контейнера.

--rm: цей параметр повідомляє Docker автоматично видаляти контейнер, коли він виходить.

--name devopsik-page: цей параметр визначає назву контейнера Docker як "devopsik-page".

-p 80:80: цей параметр відображає порт 80 контейнера на порт 80 хосту, дозволяючи вам отримати доступ до веб-сервера, що працює всередині контейнера, з веб-браузера.

lopihara/devopsik-page:${MJ_VERSION}.'${BUILD_NUMBER}': це визначає образ Docker для використання в контейнері. Зображення позначено назвою «lopihara/devopsik-page» і тегом «${MJ_VERSION}.${BUILD_NUMBER}», який було створено на попередньому кроці.

Таким чином, загальний результат цієї команди полягає в тому, щоб запустити контейнер Docker на основі зображення "lopihara/devopsik-page", з портом 80 контейнера, зіставленим з портом 80 хосту, і контейнер автоматично видаляється після його виходу.






------------------------------------------curl -v http://localhost/ |grep 'DevOps-ik'------------------------------------------------


curl: це інструмент командного рядка для створення HTTP-запитів.

-v: цей параметр вмикає докладний вивід, щоб ми могли бачити більше деталей про запит і відповідь.

http://localhost/: це URL-адреса, яку ми запитуємо. У цьому випадку ми запитуємо кореневу сторінку веб-сервера, що працює на локальному хості.

|grep 'DevOps-ik': це передає вихід curl через команду grep, яка шукає рядок "DevOps-ik" у виведених даних.

Таким чином, загальний результат цієї команди полягає в тому, щоб зробити HTTP-запит до локального хосту на порту 80, а потім знайти результат для рядка "DevOps-ik". Якщо веб-сервер налаштовано належним чином, він має повертати інформацію, пов’язану з проектом або програмою «DevOps-ik».






----------------------------withCredentials([string(credentialsId: 'docker_token', variable: 'DKR_TOKEN')])---------------------------



withCredentials: це крок Jenkins Pipeline, який дозволяє отримати облікові дані від Jenkins і надати їх як змінні середовища для використання в поточному блоці.

string(credentialsId: 'docker_token', змінна: 'DKR_TOKEN'): це визначає один обліковий запис з ідентифікатором "docker_token" і призначає значення змінній середовища "DKR_TOKEN". Тип рядка вказує на те, що облікові дані – це одне рядкове значення, а не пара ім’я користувача/пароль або інший тип облікових даних.

{ ... }: це визначає блок коду, який має доступ до змінної середовища "DKR_TOKEN". Блок коду може використовувати значення змінної середовища за потреби.

Таким чином, загальний ефект цього синтаксису полягає в тому, щоб отримати значення облікових даних Jenkins з ідентифікатором "docker_token" і зберегти його в змінній середовища під назвою "DKR_TOKEN". Тоді код у фігурних дужках може використовувати значення змінної середовища "DKR_TOKEN" за потреби. Це часто використовується в сценаріях Jenkins Pipeline для передачі конфіденційної інформації, такої як ключі API або паролі, для створення кроків або зовнішніх команд без надання значень у звичайному тексті.





------------------------ssh -o StrictHostKeyChecking=no -i /home/agent/.ssh/web.pk web@web.mp docker rm -f devopsik-page ||true------


Команда ssh використовується для встановлення безпечного з’єднання оболонки з віддаленим хостом. У цьому випадку команда підключається до віддаленого хоста під назвою web.mp за допомогою імені користувача web і файлу закритого ключа, розташованого в /home/agent/.ssh/web.pk.

Параметр -o StrictHostKeyChecking=no використовується для вимкнення суворої перевірки ключа хоста. Це означає, що команда не перевірятиме, чи змінився ключ віддаленого хоста з моменту останнього підключення, що може бути корисним у певних ситуаціях, таких як автоматичне розгортання.

Решта команди docker rm -f devopsik-page ||true виконується на віддаленому хості після встановлення з’єднання SSH. Ця команда використовує команду docker для видалення контейнера під назвою devopsik-page. Параметр -f використовується для примусового видалення контейнера, а ||true використовується для забезпечення того, що команда повертає статус успішного завершення незалежно від того, існував контейнер насправді чи ні.

Загалом ця команда підключається до віддаленого хосту, вимикає сувору перевірку ключа хоста, а потім виконує команду для видалення контейнера Docker під назвою devopsik-page.


----------------------------------curl \''${TLG_URL}'/'${TLG_TOKEN}'/sendMessage?chat_id=-1001839127589&text='${MSG_OK}'\'-----------


Ця команда використовує інструмент командного рядка curl для надсилання повідомлення в чат Telegram за допомогою API Telegram Bot.

Ось розбивка різних частин команди:

curl: це інструмент командного рядка, який використовується для надсилання запитів HTTP.
'${TLG_URL}': це змінна, яка має містити URL-адресу кінцевої точки Telegram Bot API, до якої здійснюється доступ для надсилання повідомлення.
'${TLG_TOKEN}': це змінна, яка має містити маркер автентифікації для API Telegram Bot, який використовується для авторизації запиту.
sendMessage?chat_id=-1001839127589&text='${MSG_OK}': це кінцева точка API та параметри запиту, які надсилаються до API Telegram Bot. sendMessage – це метод, який викликається, chat_id визначає ідентифікатор чату Telegram, до якого потрібно надіслати повідомлення (у цьому випадку, -1001839127589), а text – це фактичне повідомлення, яке надсилається (у цьому випадку це значення змінної MSG_OK).
Загалом ця команда використовує curl для надсилання HTTP-запиту до кінцевої точки Telegram Bot API, використовуючи певний маркер автентифікації, щоб надіслати повідомлення в певний чат.



