----------------------Огляд розділу-------------------------

Коли розробник вносить зміни і хоче внести їх до проєкту, є два основні способи зробити це:

Домовитися про перенесення своєї гілки розробки до master, або подати їх до гілки master. 
Створити серію з одного або кількох патчів, які мейнтейнер може потім застосувати до вихідного коду за допомогою утиліти patch. 
Нині перший спосіб є більш поширеним, але, особливо для простих змін, патчі все ще можуть бути надані. Насправді, ви можете попросити Git створити їх у дуже чистому вигляді. Всім, хто користується поштовим клієнтом, не обов'язково мати встановлений Git-репозиторій, щоб надсилати свої патчі мейнтейнерам.

Давайте навчимося робити це правильно!

--------------------Навчальні цілі-------------------------

Опанувавши цей розділ, ви будете:

Розуміти роль патчів у використанні Git'а.
Знати, як правильно створити і відформатувати патч, щоб його можна було переглянути і, сподіваємось, прийняти. 
Вміти створювати патч за допомого diff.
Знати, як створити патч за допомогою git format-patch, що є кращим методом.
Зрозуміти, як відформатувати патч через електронну пошту, або через ваш звичайний поштовий клієнт, або через git send-email. 
Застосувати патч, який вам надіслали.

----------Навіщо використовувати патчі?-------------------

Git - це однорангова система, призначена для обміну змінами між розробниками та репозиторіями за допомогою операцій подання (push) і витягування (pull).

Вона ефективно працює за власним протоколом git://, а також за протоколами  http:// та ssh://. Однак, бувають випадки, коли необхідно або бажано подати зміни за допомогою більш традиційного механізму виправлень, зазвичай за допомогою електронної пошти.

Першою причиною для цього є заохочення до перегляду змін перед тим, як їх буде об'єднано. Для багатьох проєктів, таких як ядро Linux, існують добре налагоджені списки розсилки та групи обговорення. Дозволяючи більшій кількості людей переглядати патч, пропонувати або вносити зміни, а також тестувати перед остаточним поданням, можна досягти кращої структури розробки.

Друга причина полягає в тому, що не всі розробники використовують Git. Повернувшись до методу патчів, ці розробники також можуть погратися із запропонованими наборами змін.

Третя причина полягає в тому, що навіть якщо розробники використовують Git, можуть існувати перешкоди, такі як корпоративні брандмауери, які заважають використанню протоколів Git, ssh і навіть http. Електронна пошта, швидше за все, надає метод для обходу цих обмежень.

На щастя, Git має всю вбудовану інфраструктуру для роботи з патчами і навіть для роботи з електронними листами.

Короткий огляд утиліти patch та її зв'язку з diff буде доречним. Припустімо, що у вас є дерево каталогів з назвою  devel, яке було створено на основі дерева каталогів stable і в якому було внесено деякі зміни. Файл виправлень просто генерується за допомогою:

$ diff -Nur stable_tree modified_tree > /path/to/my_patch



Текст зображення: Опція -N означає включення файлів, які було додано або вилучено у патчі, -u - уніфіковані відмінності, а -r - рекурсивні.

Якщо ви хочете порівняти два окремі файли з іменами original і modified, вам потрібно зробити ось так: 

$ diff -u original_file modified_file > /path/to/my_patch

Щоб застосувати патч до дерева каталогів stable, це має зробити інший розробник:

$ cd stable ; patch -p1 < /path/to/my_patch

де параметр -p1 вказує на те, що патч було зроблено, перебуваючи на один каталог вище. 

-------------------------Створення патчів--------------------------

При безпосередньому використанні Git'а створення патчів у потрібній формі дуже просте і використовує лише базові команди. Наприклад, якщо ви хочете створити патч з усіма змінами, внесеними з моменту останнього комміту, ви можете просто зробити наступне: 

$ git diff > patch_file

і зберегти результат у файлі патчу (звісно, ви також можете отримати різницю між двома коммітами або двома тегами тощо). 

Ви також можете створювати патчі іншими способами з більш тонким контролем. Основною командою для створення патчів є git format-patch. Аргументи, які передаються, визначають, які і скільки патчів буде створено.

Наприклад:

$ git format-patch -3

буде створено файл виправлень для кожного з трьох останніх коммітів з такими назвами: 

0001-This-is-the-first-commit.patch

0002-This-is-the-second-commit.patch

де назви згенеровано з повідомлень про комміти, і вони послідовно впорядковані в хронологічній послідовності.Кожен патч буде охоплювати всі файли, які було змінено у комміті, в єдиному патчі. 

Можна також зробити щось таке:

$ git format-patch main

щоб отримати всі зміни з моменту виходу гілки з основної гілки, або використати будь-який ідентифікатор або тег комміту, а також вказати діапазон коммітів.

Існує багато інших варіантів. Хорошим варіантом є --signoff або -s, який додає рядок у вигляді: 

Signed-off-by: A Smart Guy <asmartguy@linux.com>

відповідно до налаштувань у вашому файлі конфігурації. Це дозволяє чітко простежити, хто і що зробив, і є обов'язковою у деяких проєктах, наприклад, у ядрі Linux. 

-----------------------Надсилання поштою-------------------------

Недивно, що команда для безпосереднього надсилання патчів електронною поштою git send-email. Щоб надіслати повідомлення до списку розсилки ядра Linux, вам слід скористатися цією командою: 

$ git send-email -to linux-kernel@vger.kernel.org 0001-This-is-the-first-commit.patch

При цьому вам буде запропоновано ввести певну інформацію, наприклад, від кого надходить повідомлення. Також можна вказати додаткову інформацію, наприклад, конфігурацію вашого поштового агента smtp, а також додаткових одержувачів надісланого електронною поштою патча.

Ми не розглядаємо, чи працюватиме це без внесення змін до налаштувань пошти у вашій системі (наприклад, можливого переналаштування sendmail) і як виправити будь-які проблеми, оскільки це може бути складно, залежно від конфігурації вашої системи, і це може бути неможливо зробити, не будучи привілейованим користувачем.

Втім, немає необхідності використовувати команду git send-email. Ви можете використовувати будь-який поштовий клієнт, до якого ви звикли, наприклад, thunderbird, evolution, mutt тощо. Але, якщо ви використовуєте звичайний поштовий клієнт, ви повинні бути обережними, щоб не зіпсувати патч в процесі розсилки:

Вимкніть будь-яке кодування html і надсилайте звичайний текст ASCII.
Вимкніть будь-яке обтікання рядків або обтікання тексту.
Загалом, більшість розробників надають перевагу вбудовуванню патчів безпосередньо у повідомлення електронної пошти, а не використанню вкладень, які (окрім того, що вимагають додаткових кроків для перегляду) можуть виявити інші особливості поштових клієнтів. Навіть для дуже довгих патчів вкладення будуть не варто використовувати.

------------------------Застосування патчів--------------------

В ідеальному світі застосовувати патчі так само просто, як і робити:

$ git am 0002-This-is-the-second-commit.patch

за умови, що ви перебуваєте у гілці, до якої ще не було внесено зміни до патчів. Ця команда є дуже потужною; вона не лише застосовує патчі до робочих копій у каталогах вашого проєкту, але й коммітить. 

Цілком можливо, що один або кілька патчів не буде застосовано через суперечливі лінії розробки між відправником та отримувачем патчів. Такі проблеми доведеться вирішувати по черзі. Наприклад, ви можете отримати повідомлення на кшталт: 

error: patch failed: file2:1
error: file2: patch does not apply
Patch failed at 0001.

Коли ви вирішите цю проблему, виконайте git am --resolved. Якщо ви бажаєте пропустити цей патч, виконайте git am --skip.

Ви також можете відкопіювати патчі і відновити початкову гілку за допомогою:

$ git am --abort

Можливо, ви надасте перевагу більш обережному виконанню робіт вручну. Ви можете застосувати окремі патчі безпосередньо до вашої робочої копії. Наприклад, ви можете спробувати: 

$ patch --dry-run < 0002-This-is-the-second-commit.patch

Якщо проблем не виникло, запустіть ще раз без опції --dry-run. Після цього вам потрібно буде запустити git add для відповідних файлів і, зрештою, зробити git commit.

Існує ще одна команда нижчого рівня, git apply, яка є основою git am. Якщо ви зробите ось це:

$ git apply --check 0002-This-is-the-second-commit.patch

вона працює як patch --dry-run. Насправді вона не виконає виправлення. Якщо проблем не виникло, ви можете запустити команду ще раз без параметра --check. Це виправить робочі файли у ваших каталогах і оновить зміст (індекс). Зрештою, вам все одно доведеться викликати git add і git commit. 



Текст зображення: git apply не змінює зміст (індекс). Ви також можете використовувати --cachedd, щоб застосувати зміни лише до змісту (індексу).

-------------------Лабораторна 12.1. Синхронізація патчів-------------------------------

Завдання 12.1: Синхронізація патчів

Спочатку ініціалізуйте репозиторій, внесіть ваше ім'я, адресу електронної пошти тощо. Потім додайте кілька файлів до проєкту і закоммітьте їх. 
Тепер зробіть клон репозиторію за допомогою git clone і перейдіть до нового каталогу.  
Змініть файл в копії і створіть новий файл. Використовуйте  git add та git commit, щоб повністю оновити репозиторій.  
Створіть патч за допомогою git format-patch. Використовуйте опцію -s , щоб створити підписаний рядок.
Поверніться до вихідного репозиторію і спершу спробуйте застосувати патч за допомогою git apply --check. Якщо це вдасться, застосуйте патч за допомогою git am.  
Для додаткового тренування спробуйте скористатися git send-email, щоб надіслати патч собі.

1. 

# Ініціалізуйте репозиторій, введіть ім’я, адресу електронної пошти до файлу .config 

echo -e "\n\n******** СТВОРЕННЯ РЕПОЗИТОРІЮ ТА КОНФІГУРАЦІЯ\n\n" 

rm -rf git-test ; mkdir git-test ; cd git-test 
git init 
git config user.name "A Smart Guy" 
git config user.email "asmartguy@linux.com" 

echo -e "\n\n******** CТВОРЕННЯ КІЛЬКОХ ФАЙЛІВ ТА ДОДАВАННЯ ЇХ ДО ПРОЄКТУ, ПОТІМ КОММІТ\n\

echo file1 > file1 
echo file2 > file2 
git add file1 file2 
git commit . -s -m "Це перший комміт" 

2. 

echo -e "\n\n************ СТВОРЕННЯ НОВОГО КЛОНА\n\n" 

cd .. 
git clone git-test git-newer 

3. 

echo -e "\n\n************ ВНЕСЕННЯ ЗМІН ДО РЕПОЗИТОРІЮ*\n\n" 

cd git-newer 

echo another line >> file2 
echo a third file > file3 

echo -e "\n\n************ ДОДАВАННЯ ТА КОММІТ ЗМІН\n\n" 

git add file2 file3 
git commit -s -m "модифікації з нового клона" 

4. 

echo -e "\n\n************ СТВОРЕННЯ ПАТЧА*\n\n" 

git format-patch -1 -s 
mv 00* .. 

5. 

echo -e "\n\n************ ПЕРЕВІРКА, ЧИ ПРАЦЮЄ ПАТЧ\n\n" 

cd .. 
cd git-test 
git apply --check ../00* 

echo -e "\n\n************* ЗАСТОСУВАННЯ ПАТЧА\n\n" 

git am ../00* 

Ви можете завантажити скрипт з переліченими кроками, наведеними вище: 
s_12/lab_patches.sh 
до вашого файлу розвʼязків. 
Перегляньте, будь ласка, SOLUTIONS/s 12/lab_patches.sh 

