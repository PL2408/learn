Для будь-якого останнього дистрибутива Linux, швидше за все, Git вже буде встановлений у вашій системі. Щоб перевірити це, виконайте: 

$ which git

Якщо ви отримаєте щось на кшталт /usr/bin/git то у вас є принаймні основна інфраструктура Git'а. Однак, якщо у вас старіший дистрибутив Linux, можливо, вам доведеться подбати про встановлення самостійно. 

У більшості випадків, ви встановите двійкові пакети, які відповідають вашому дистрибутиву, якщо тільки ви не пурист, у цьому випадку ви можете скомпілювати з коду, як ми обговоримо пізніше. Ви можете зробити це, якщо ви намагаєтеся використовувати новішу версію, ніж та, що використовується у вашому дистрибутиві Linux. 

Використання бінарних пакетів позбавить вас від необхідності переконуватися, що у вас є всі бібліотеки та пакунки для розробки, які потрібно встановити належним чином.

Надалі ми будемо вважати, що ви увійшли в систему як адміністратор, або, що набагато краще, просто використовуйте sudo для кроків встановлення. 

Для Red Hat і пов'язаних з ним rpm-дистрибутивів, таких як Red Hat Enterprise Linux (і близьких родичів, таких як CentOS і Fedora) введіть:

$ sudo dnf list git*

Це покаже Git і пов'язані з ним пакети, які потім можна встановити:

$ sudo dnf install git* cgit

Зауважте, що пакети  git-cvs та git-svn потрібні лише в тому випадку, якщо ви зацікавлені в конвертації з CVS та/або Subversion репозиторіїв. Крім того, cgit вже відсутній в репозиторіях для RHEL/CentOS 8..

У системах на базі SUSE відповідні пакети можна знайти, виконавши:

$ sudo zypper search git

а найголовніші засоби встановлюються за допомогою:

$ sudo zypper install git git-core

У системі на основі deb, наприклад, Debian або Ubuntu, найповніша установка буде такою:

$ sudo apt-get install git-core git-gui gitweb cgit gitk git-daemon-run git-cvs git-svn gettext

Для систем Gentoo відповідною командою буде:

$ sudo emerge -a dev-util/git

Точні інструкції та назви пакетів можуть відрізнятися від версії до версії, навіть в межах одного дистрибутива Linux. Таким чином, ви повинні бути знайомі з вашим менеджером пакетів і з тим, як знайти будь-які відсутні інгредієнти і встановити їх. 

Якщо ви працюєте на платформі Windows, версії Git'а існують і для неї. Якщо ви використовуєте Cygwin, ви можете встановити безпосередньо з меню налаштувань. Щоб отримати окремий пакет, ви можете відвідати вебсторінку Git для Windows.

------------------------------------------------------------------------------------------------------------------

За необхідності ви можете отримати вихідний код Git'а, завантаживши заархівовані файли або бінарні пакети для вашого дистрибутиву. Якщо у вас вже встановлена версія Git'а, ви можете скористатися нею безпосередньо для клонування сховища вихідного коду Git'а.

Для цього введіть:

$ git clone -v https://github.com/git/git.git

Після цього ви можете підготувати, скомпілювати та встановити Git за стандартним поданням: 

$ cd git

$ ./configure

$ make

$ sudo make install



Текст зображення: Вам може не знадобитися крок ./configure. Вищевказані дії встановлять Git до вашого домашнього каталогу. 

Якщо ви хочете помістити його в системний каталог, то можете замість цього зробити:

$ make prefix=/usr

$ sudo make install

На жаль, цілком можливо, що у вашій системі будуть відсутні деякі з необхідних компонентів для компіляції та встановлення Git'а з коду, і ми не можемо дати вам абсолютно точний рецепт. Це пов'язано як з відмінностями між дистрибутивами Linux, так і з відмінностями в точному розгортанні програмного забезпечення на вашому комп’ютері та історією встановлень і оновлень. Якщо компіляція завершиться невдачею, сподіваємося, ви отримаєте повідомлення про помилку, яке буде достатньо зрозумілим, щоб допомогти вам отримати відсутні частини рецепта.

Навіть якщо у вас є легко встановлений двійковий пакет для Git'а, можливо, ви жадаєте останню версію і не маєте іншого виходу, окрім як компілювати з вихідного коду. Сподіваємося, що це не надто складно.



Текст зображення: Після того, як ви встановили Git, найпростіший спосіб оновити свою версію - це використовувати сам Git, і це прикольно. 

------------------------------------------------------------------------------------------------------------------------------

Якщо у вас вже встановлений Git, чудовий спосіб отримати останню версію – скористатися самим Git'ом. Якщо все гаразд зі швидкістю інтернету, завантажте з публічного репозиторію, виконавши: 

$ git clone -v https://github.com/git/git.git 

Якщо у вас ще не встановлено Git, ви можете завантажити архів з того ж сайту, а потім розпакувати його, і решта інструкцій з компіляції та встановленню будуть такими ж самими.  

Повний репозиторій Git'а після завантаження займатиме близько 145 МБ. Більшу частину цього простору займає каталог.git, який містить всю історію версій. Сам архів має значно менший розмір. 

Якщо у вас встановлений Git, ви можете побачити, яку версію ви використовуєте, за допомогою наступної команди (вивід надається під командою):  

$ git --version 

git version 2.27.0 

Перейдіть до каталогу Git'а, щоб побачити, яка остання версія Git'а в завантаженому репозиторії, створеному під час операції клонування:  

$ cd git 

Існує кілька способів, серед яких:

$ git tag 

..... 

v2.29.3 

.... 

де ми знайшли найвищий номер версії, який було позначено тегом. Втім, це може бути неточно, оскільки використання тегів є добровільним. Наприклад, зробіть: 

$ git log 

commit 7e391989789db82983665667013a46eabc6fc570 (HEAD -> main, origin/main, origin/HEAD) Author: Junio C Hamano <gitster@pobox.com> 
Date: Fri Apr 30 13:38:07 2021 +0900 

The thirteenth batch 
Signed-off-by: Junio C Hamano <gitster@pobox.com> 
.... 

може вказувати на пізнішу версію, яку ми можемо перевірити після підготовки, компіляції та встановлення за допомогою кроків, про які ми говорили раніше: 

$ cd git 

$ make 

$ sudo make install 

Цю конкретну версію після компіляції можна знайти: 

$ ./git --version 

git version 2.31.1.442.g7e391 

За замовчуванням, якщо ви компілюєте, а потім встановлюєте, все буде розміщено у вашому каталозі $HOME, а виконувані файли – у каталозі bin. Втім, ви можете вказати альтернативу під час компіляції, наприклад: 

$ make prefix=/usr/local 

або 

$ make prefix=/opt 

тощо. Якщо ви додасте новий каталог до вашого шляху, ви будете використовувати новішу версію Git'а, а не встановлену, як у цьому прикладі:  

$ export PATH=/opt/bin:$PATH 

При компіляції за допомогою команди make, можливо, вам доведеться встановити певне додаткове програмне забезпечення (зазвичай, для заголовних файлів). Наприклад, у дистрибутивах Red Hat Enterprise Linux та їхніх близьких родичів, можливо, доведеться зробити так: 

$ dnf install curl-devel expat-devel openssl-devel 

або на системах deb так: 

$ apt-get install libcurl4-gnutls-dev libexpat1-dev libssl-dev 

Як альтернативу з втратою функціональності, можна зробити так: 

$ make prefix=/opt NO_CURL=1 NO_EXPAT=1 NO_SSL=1 

Прочитання Makefile покаже вам інші подібні варіанти. 

Після компіляції ви можете зробити так: 

$ make prefix=/opt install 

і у вас буде встановлено останню версію, яку ви завжди можете використати, встановивши її раніше за системну версію.  

Прочитайте файли README, INSTALL та Makefile у головному каталозі коду Git'а, щоб дізнатися більше про все це.
------------------------------------------------------------------------------------------------------------------------

