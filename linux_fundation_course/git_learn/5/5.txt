-------------------------------Огляд розділу-------------------------------

Git розрізняє три типи файлів: відстежувані, ігноровані та невідстежувані, причому лише відстежувані файли зберігаються у репозиторії. Нижче наведено основні операції з файлами:

Додавання файлів.
Видалення файлів.
Переміщення (і перейменування) файлів.
Створення списків файлів.
У наступному розділі ми обговоримо створення коммітів, що насправді є не лише файловою операцією.

------------------------Навчальні цілі-------------------------------------

Опанувавши цей розділ, ви зможете:

Перелічіть категорії, до яких належать файли: відстежувані, ігноровані та невідстежувані.
Визначити категорії файлів та пояснити, чим вони відрізняються одна від одної. 
Розуміти використання файлів .gitignore.
Зрозуміти використання основних команд git'а, орієнтованих на роботу з файлами, включно з add, rm, mv та ls-files.
Попрактикуватися з цими та іншими важливими командам. 

------------------------Категорії файлів-----------------------------------

З точки зору Git'а, файли в каталогах вашого проєкту поділяються на три категорії:

Відстежувані файли
Вони вже знаходяться у репозиторії і у поточному робочому стані, або перебувають на стадії стадіювання, тобто змінені, але ще не закоммітені.
Ігноровані файли
Вони невидимі для Git'а. Кожен каталог може містити файл з назвою .gitignore, у якому перелічено конкретні файли або шаблони імен, які слід ігнорувати. Наприклад, багато тимчасових файлів можна ігнорувати за допомогою специфікації типу *.o. Файл.gitignor у будь-якому каталозі застосовується рекурсивно до всіх підкаталогів під ним, тому якщо ви вкажете ім'я файлу або шаблон у головному каталозі, всі файли, що підпадають під опис, будуть невидимими. Також можна перевизначити правила за допомогою префікса !. Наприклад, якщо ваш файл gitignore містить:

*.ko
!my_driver.ko

Друга специфікація перевизначає першу, більш загальну, і файл my_driver.ko буде відстежуватися.
Невідстежувані файли
Це все, що не підпадає під дві попередні класифікації. Перевіряються всі файли у ваших поточних робочих каталогах, і все, що не відстежується або ігнорується, вважається невідстежуваним. Це можуть бути файли, які ще не були додані, це можуть бути тимчасові файли тощо. Але якщо ви закоммітите весь каталог, вони стануть відстежуваними файлами. 

-------------------------Основні файлові команди--------------------------

it add
Додає один або кілька файлів у вигляді блобів до сховища об'єктів і додає посилання на нові блоби до змісту за допомогою sha1-хешу. Таким чином, ми індексуємо один або кілька файлів і каталогів. Він може бути використаний як для додавання нових файлів, так і для збереження змінених. Файли не будуть закоммітені, доки не буде зроблено git commit. Існує кілька варіантів (див. довідку git help add). Наприклад, ви можете використовувати -i для інтерактивного вибору файлів для стадії або -u для оновлення лише тих файлів, які вже відомі Git'у. Ви також можете вказати шаблони підстановки або імена каталогів (в яких буде додано все дерево підкаталогів). Варто повторити, що поки ви не зробите git commit, зміни лише стадіюються; репозиторій не оновлюється. 

git rm
Видаляє файл з робочого дерева та змісту (індексу), але не видаляє його з репозиторію; це відбувається лише тоді, коли ви робите новий комміт. Це може бути досить небезпечно, якщо ви не усвідомлюєте, що робите. Якщо ви хочете вилучити файл лише з робочого каталогу, а не зі змісту репозиторія, скористайтеся звичайною командою rm. Видаляючи файли з репозиторію, ви не видаляєте їх з історії, оскільки це було б нечесно. Якщо ви хочете видалити файл, який було стадійовано, але не закоммітено, вам слід додати опцію --cached, як у прикладі:

$ git add myfile

$ git rm myfile --cached

git mv
Перейменовує файл і вносить нове ім'я файлу до репозиторія. Це еквівалентно перейменуванню робочого файлу, а потім виконанню  git rm для старого імені файлу і git add для нового, тобто наступні операції є еквівалентними (будь ласка, подивіться на команди нижче). Це проста операція в Git'і,якщо порівнювати зі старими системами керування версіями, де перейменування файлу означає фактичне видалення старого і додавання нового файлу. У цьому випадку бінарні блоби, пов'язані з файлом, залишаються незмінними, оновлюється лише зміст (індекс).

$ git mv oldfile newfile

$ mv oldfile newfile ; git rm oldfile ; git add newfile

Нижче наведено таблицю, яка показує, як працюють усі три етапи.

Команда	Вихідний файл	Зміст (Index)	Ланцюжок коммітів	Посилання
git add	Без змін	Оновлено новим файлом	Без змін	Без змін
git rm	Файл видалено	Файл видалено	Без змін	Без змін
git mv	Файл переміщено / перейменовано	Оновлено ім'я / розташування файлу	Без змін	Без змін
git ls-files
Показує інформацію про файли в змістовому (індексному) та робочому дереві. За замовчуванням ця команда показує лише файли у репозиторії. Якщо ви хочете показати невідстежувані файли, скористайтеся наведеною нижче командою, де параметр --otheres показує невідстежувані файли, а параметр --exclude-standard вказує ігнорувати стандартні винятки, такі як файли .gitignore.

$ git ls-files --others --exclude-standard

----------------------Лабораторна 6.1. Практика основних файлових команд--------------------

Завдання 6.1: Практика основних файлових команд 
Спочатку ініціалізуйте репозиторій, внесіть ваше ім'я, адресу електронної пошти тощо. Потім додайте кілька файлів до проєкту і закоммітьте їх.  
Видаліть один з файлів за допомогою git rm і за допомогою git diff перегляньте різницю з репозиторієм. 
Перейменуйте файл, що залишився, за допомогою git mv і ще раз перевірте різницю з репозиторієм за допомогою  git diff.
Закоммітьте ще раз і перегляньте історію за допомогою git log. Потім виконайте git ls-files без аргументів.
Додайте два нових файли, зробіть так, щоб один з них ігнорувався Git'ом, а інший змініть. Знову виконайте git ls-files. 
Тепер спробуйте кілька різних опцій для git ls-files, наприклад, -t і -o. Виконайте man git ls-files, щоб побачити різні доступні опції і спробувати деякі інші.  
Тепер додайте нові файли, які не було проігноровано за допомогою git add, закоммітьте ще раз і виконайте git ls-files з певними опціями, щоб побачити результати. Можливо, вам також захочеться ще раз зробити git log. 
1. 

# Ініціалізуйте репозиторій, внесіть ім’я та адресу електронної пошти до файлу.config 

echo -e "\n\n************* СТВОРЕННЯ РЕПОЗИТОРІЯ ТА КОНФІГУРАЦІЯ IT\n\n" 

rm -rf git-test ; mkdir git-test ; cd git-test 
git init 
git config user.name "A Smart Guy" 
git config user.email "asmartguy@linux.com" 

echo -e "\n\n********* СТВОРЕННЯ КІЛЬКОХ ФАЙЛІВ, ДОДАВАННЯ ДО ПРОЄКТУ ТА КОММІТ\n

# Створіть кілька файлів, додайте до проєкту та запоммітьте 
echo file1 > file1 
echo file2 > file2 

git add file1 file2 
git commit . -s -m "Це перший комміт" 

 

2. 

# Видаліть один з файлів та перегляньте зміни в репозиторії 

echo -e "\n\n************* ВИДАЛЕННЯ ОДНОГО ФАЙЛА ТА ПОРІВНЯННЯ\n\n" 

git rm file2 
git diff 

 

3. 

echo -e "\n\n************* ПЕРЕНАЗИВАННЯ ОДНОГО ФАЙЛА ТА ПОРІВНЯННЯ\n\n" 
# Тепер переназвіть файл та знову порівняйте 
git mv file1 file1_renamed 
git diff 

echo -e "\n\n************* КОММІТ ЗМІН\n\n" 

 

4. 

# Перенесіть все це новим коммітом

git commit . -s -m "Це другий комміт" 

echo -e "\n\n************* ПЕРЕГЛЯД ІСТОРІЇ ПРОЄКТУ\n\n" 

# Перегляньте історію проєкту 

git log 

echo -e "\n\n************* ВИКОНАННЯ git ls-files" 

# Виконайте git ls-files 

git ls-files 

 

5. 

echo -e "\n\n************* ДОДАВАННЯ ЩЕ ДВОХ ФАЙЛІВ, ОДИН БУДЕ ІГНОРУВАТИСЬ, ЗМІНА ФАЙЛА\n\n" 

echo extra1 >> extra1 
echo extra2 >> extra2 
echo anotherline >> file2 
echo extra1 >> .gitignore 

echo -e "\n\n************* ВИКОНАННЯ git ls-files БЕЗ АРГУМЕНТІВ\n\n" 

git ls-files 

 

6. 

echo -e "\n\n************* ВИКОНАННЯ git ls-files З -t \n\n" 

git ls-files -t 

echo -e "\n\n************* ВИКОНАННЯ git ls-files З -t --others\n\n" 

git ls-files -t -o 

 

7. 

echo -e "\n\n************* ВНЕСЕННЯ НОВОГО КОММІТУ ТА ПЕРЕВІРКА\n\n" 

git add extra2 
git commit -a -s -m "третій комміт" 

git ls-files -t -c -o -s 

git log 

 

Ви можете завантажити скрипт з переліченими кроками, наведеними вище: 
s_06/lab_gitbasics.sh 
до вашого файлу розв’язків.
Перегляньте, будь ласка, SOLUTIONS/s 06/lab_gitbasics.sh 

---------------------------------