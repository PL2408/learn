------------------------------Навчальні цілі-------------------------------

Опанувавши цей розділ, ви зможете:

Розуміти роль Git'а у полегшенні розподіленої розробки.
Клонувати репозиторій.
Передавати (push) (і отримувати (pull)) зміни до репозиторію.
Вносити зміни до репозиторію.
Розуміти, як запустити процес-демон Git'а, щоб зробити ваш репозиторій доступним через інтернет.

------------------------------Спільна робота-------------------------------

Багато інших систем керування версіями побудовано на понятті центрального, авторитетного репозиторію, який є центром, з яким працюють окремі розробники. Суттєва відмінність архітектури Git'а полягає в тому, що жоден репозиторій не відіграє такої центральної ролі, принаймні структурно.

Ведення окремих репозиторіїв має сенс принаймні у трьох ситуаціях: 

Розробник працює автономно.
Розробники роз'єднані у великій (навіть глобальній) мережі. Локальна група розробників може використовувати свій власний репозиторій для збору змін, які є важливими та цікавими для них.
Існують різні проєкти або підгалузі, які варто глибоко розробляти самостійно, з метою подальшого об'єднання змін, які будуть корисними для основного проєкту. 
Оскільки Git має таку потужну інфраструктуру, призначену для розгалуження та об'єднання кількох репозиторіїв, він може відносно легко впоратися зі складною логістикою розподіленої розробки.

Деякі основні операції, пов'язані з роботою з віддаленими сховищами, наведені нижче:

Клонування
Створює початкову копію віддаленого репозиторію та розміщує її у власну базу даних об'єктів. Основною командою є git clone.
Витягування (pull)
Переносить зміни з віддаленого репозиторію до локального, підтримуючи вашу гілку відстеження в актуальному стані. Основні команди: git pull та git fetch. 
Внесення змін (push)
Надсилайте ваші зміни до віддаленого репозиторію. Основна команда - git push. 
Публікація
Робить ваш репозиторій доступним для інших, щоб його можна було клонувати, витягувати з нього і, можливо, надсилати зміни до нього.
Git використовує гілки відстеження для роботи з вмістом у віддалених репозиторіях. Це локальні гілки, які слугують проксі або посиланнями для певних гілок у віддалених репозиторіях.

Існує особливий тип репозиторію, який називається «голий» (bare) репозиторій. Зазвичай ви працюєте в репозиторії для розробки. Голий репозиторій не має робочих каталогів, не використовується для розробки і не має перевірених гілок. Він використовується лише як авторитетне місце для клонування, витягування та внесення змін. Він створюється за допомогою опції --bare до команди clone.

--------------------------------Клонування (1)------------------------------

Отримати початковий клон віддаленого репозиторію дуже просто:

$ git clone git://git.kernel.org/pub/scm/git/git.git

яка відключає весь репозиторій Git для самого Git'а, поміщає його в каталог з назвою git, який містить звичайний підкаталог.git з усіма об'єктами, індексами тощо, які є частиною репозиторію.

Це може бути великим обсягом даних для завантаження, але це одноразова операція.

Зверніть увагу на використання протоколу git://  у віддаленій специфікації. Це найкращий метод, але не єдиний, який можна використовувати. Існують і інші можливості:

file:///path/to/repo.git
ssh://user@remotesite.org[:port]/path/to/repo.git
user@remotesite.org:/path/to/repo.git
ht‌tp://remotesite.org/path/to/repo.git
ht‌tps://remotesite.org/path/to/repo.git
rsync://remotesite.org/path/to/repo.git

Метод git:// є найшвидшим і найчистішим, і його слід використовувати, якщо він підтримується.

Якщо ви робите клон локального репозиторію, Git використовуватиме жорсткі посилання, де це можливо, щоб заощадити місце на диску. Якщо ви хочете цьому запобігти, використовуйте параметр --no-hardlinks у git clone.

Ви можете бачити посилання як у локальному, так і у віддаленому репозиторії.

-----------------------------Клонування (2)----------------------------------

Наприклад, в локальному каталозі Git-проєкту зробіть:

$ git show-ref

bd757c18597789d4f01cbd2ffc7c1f55e90cfcd0 refs/heads/main
bd757c18597789d4f01cbd2ffc7c1f55e90cfcd0 refs/remotes/origin/HEAD
6d325dff7434895753dcad82809783644dec75f6 refs/remotes/origin/html
dc89689e86c991c3ebb4d0b6c0cce223ea8e6e47 refs/remotes/origin/maint
....
1250aafa65e7ec62cf776d863ca8c7e4f822928c refs/tags/v1.6.6-rc2
d205d24b8ae17232babad615572bb0265bc029f1 refs/tags/v1.6.6-rc3
09e5ddd756bca67552aad623bab374614ae5e60d refs/tags/v1.6.6-rc4

Щоб побачити, що знаходиться у віддаленому репозиторії, виконайте:

$ git ls-remote git://git.kernel.org/pub/scm/git/git.git

bd757c18597789d4f01cbd2ffc7c1f55e90cfcd0 HEAD
6d325dff7434895753dcad82809783644dec75f6 refs/heads/html
dc89689e86c991c3ebb4d0b6c0cce223ea8e6e47 refs/heads/maint
8407cc83c60b5e45869c5f64cdcaafee5e9f2f92 refs/heads/man
bd757c18597789d4f01cbd2ffc7c1f55e90cfcd0 refs/heads/main
....
d205d24b8ae17232babad615572bb0265bc029f1 refs/tags/v1.6.6-rc3
94058a90cf3e10122037cd80ea48d3d52be5efd9 refs/tags/v1.6.6-rc3^{}
09e5ddd756bca67552aad623bab374614ae5e60d refs/tags/v1.6.6-rc4
ab0964d951e4ea88f9ea2cbb88388c1bcd4ae911 refs/tags/v1.6.6-rc4^{}

Ви помітите, що у віддаленому репозиторії є додаткові посилання, які не відображені в клоні.

Якщо ви хочете оновити свій репозиторій зі змінами, зробленими на віддаленому сайті, ви можете просто зробити це за допомогою:

$ git pull

для синхронізації.

-------------------------Публікація вашого проєкту (1)-----------------------

Припустімо, що ви хочете зробити ваш проєкт доступним для інших як на вашому локальному комп'ютері, так і у мережі, для клонування, внесення змін, завантаження змін тощо.

По-перше, вам слід створити «голу» версію вашого проєкту, наприклад:

$ git clone --bare git-test /tmp/git-test

де ви побачите, що /tmp/git-test тепер містить копію репозиторія вашого проєкту, але не містить самих робочих файлів.

Локальний користувач може легко створити нову клоновану копію тією ж командою без опції--bare, що і у випадку з:

$ git clone /tmp/git-test my-git

Але як бути з мережевими користувачами?

Щоб зробити копію доступною за допомогою власного протоколу Git'а, вам потрібно встановити службу процесу-демона Git'а. Щоб зробити доступним ваш «голий» репозиторій, вам потрібно створити порожній файл у його головному каталозі:

$ touch /tmp/git-test/git-daemon-export-ok

Ви можете налаштувати автоматичний запуск процесу-демона Git'а, налаштувавши xinetd або inetd у вашій системі, і таким чином ви зможете досить точно контролювати його поведінку. Однак, для спрощення, ви можете просто запустити процес-демон у фоновому режимі: 

$ git daemon &

 

Текст зображення: Вам не обов'язково запускати його від імені суперкористувача.

Тоді віддалений користувач може просто клонувати ваш репозиторій за допомогою:

$ git clone 192.168.1.100:/tmp/git-test my-git

Це дає йому можливість лише клонувати та отримувати, але не вносити зміни. Ви можете дати кожному можливість відкочувати зміни:

$ git daemon --enable=receive-pack

але це слід робити лише в дуже дружньому середовищі.

----------------------------Публікація вашого проєкту (2)---------------------------

Крім того, це буде зроблено для всіх Git-репозиторіїв у системі. Щоб увімкнути доступ на запис лише для одного репозиторію, вам слід додати до конфігураційного файлу цього репозиторію такі рядки: 

[daemon]
receivepack = true

Щоб увімкнути доступ через протокол http, вам потрібно мати встановлений і працюючий вебсервер (можливо, apache) і трохи знати, як його налаштувати. Ви можете розмістити каталог вашого проєкту або в /var/www/html, або в непривілейованому місці /home/username/public_html (в цьому випадку ваш сервер має бути налаштований на такий доступ).

Перш ніж доступ буде надано, ви повинні перейти до каталогу проєкту і виконати команду:

$ git --bare update-server-info

Після цього доступ через вебсервер можна здійснювати за допомогою цих команд: 

$ git clone https://192.168.1.100/git-test my-git
$ git clone https://192.168.1.100/~username/git-test

де вам потрібно вказати правильну IP-адресу або домен, а також правильне ім'я користувача.

Припустимо, ви хочете зробити свій проєкт доступним для когось, хто не користується Git'ом, або ви хочете зберігати заархівовані матеріали вашого поточного робочого дерева без включення інформаційних каталогів репозиторію  .git.

Це легко зробити за допомогою git archive:

$ git archive --verbose HEAD | bzip2 > myproject.tar.bz2

Якщо ви хочете створити архів, що відповідає певному моменту, а не останньому стану, скажімо, позначений v1.7.1, ви можете це зробити:

$ git archive --verbose v1.7.1 | bzip2 > myproject_v1.7.1.tar.bz2

-----------Отримання (fetch), завантаження (pull) та подання (push)--------------------

Щоб оновити ваш репозиторій до рівня оригінального віддаленого репозиторію, ви можете об'єднати зміни з головної гілки оригінального репозиторію з цим репозиторієм:

$ git fetch
$ git merge origin/main

Це можна зробити за один крок за допомогою:

$ git pull origin main

і якщо у вас вже є основна гілка та ви її перевірили, ви можете просто зробити це:

$ git pull

яка зливається з гілки HEAD вихідного репозиторію. Якщо ви хочете вказати конкретну гілку, ви можете зробити будь-який з варіантів: 

$ git pull . branch
$ git merge branch

Процес, зворотний до отримування (fetch), - це подання (push), тобто внесення змін до віддаленого репозиторію. Щоб опублікувати свої зміни, ви повинні спочатку переконатися, що ваш репозиторій чистий та актуальний, після чого ви можете скористатися будь-яким з прийнятих протоколів, наприклад, таким:

$ git push git://remotesite.org/path/to/repo.git main

Якщо у вас є доступ на запис, більше нічого не потрібно. Якщо ви використовуєте протокол ssh, вам буде запропоновано ввести пароль, як і слід було очікувати, якщо тільки ви не налаштували ssh так, щоб він не вимагав введення пароля щоразу.

Зауважте, що коли ви виконуєте подання (push), воно має відбуватися до голого репозиторію. Інакше робоче дерево віддаленого репозиторіюне буде оновлено під час подання (push). Якщо ви виконуєте подання (push) до поточної перевіреної гілки, результати будуть не такими, як ви очікуєте.

------------------Лабораторна 11.1. Отримання доступу до вашого репозиторію віддалено по протоколу------------------

Створіть репозиторій і заповніть його; для цього ви можете скористатися рішенням з попередніх лабораторних робіт. Щоб створити правильний віддалений репозиторій, спочатку клонуйте його на локальній машині за допомогою опції --bare, наприклад: 

$ git clone --bare <pathto>/git-test /tmp/my-remote-git-repo 

Щоб зробити його доступним за протоколом git://, вам потрібно створити файл git-daemon-export-ok у головному каталозі проєкту або у підкаталозі .git  і запустити процес git-daemon. Якщо ви це зробите:  

$ git daemon 

хтось зможе клонувати ваш репозиторій за допомогою: 

$ git clone git://ipaddress/tmp/my-remote-git-repo 

підставивши замість ipaddress правильне значення і вказавши повний шлях.  

Зручніше вказати кореневий або базовий каталог для репозиторіїв, виконавши: 

$ git daemon --base-path=/tmp 

а потім хтось зможе клонувати ваш репозиторій за допомогою: 

$ git clone git://ipaddress/my-remote-git-repo 

Зверніть увагу

Вам не потрібно бути суперкористувачем, щоб запустити git-daemon, і ви, ймовірно, захочете запустити його у фоновому режимі або з'ясувати, як зробити так, щоб він запускався як служба при завантаженні.  

Ви можете спробувати подивитися, що станеться, якщо пропустити крок запуску демона або створення файлу git-daemon-export-ok. 

Якщо у вас є партнер на іншій машині, або ви працюєте на двох машинах, спробуйте клонувати репозиторії один одного за допомогою цього методу.

Завдання 11.2: Отримання доступу до вашого репозиторію віддалено по протоколу ssh 

Створіть новий клон репозиторію за допомогою протоколу ssh, використовуючи обидва поданих методи: 

$ git clone ssh://user@ipaddress/tmp/my-remote-git-repo 
$ git clone user@ipaddress:/tmp/my-remote-git-repo 

підставивши правильне значення замість user@ipaddress. 

Якщо у вас є партнер на іншій машині, або ви працюєте на двох машинах, спробуйте клонувати репозиторії один одного за допомогою цього методу. 

Для того, щоб це спрацювало, можливо, вам доведеться встановити ssh server. На машинах на основі RPM, можливо, доведеться виконати такі процедури:

$ sudo dnf install openssh-server 

а на системах на основі deb такі:

$ sudo apt-get install openssh-server 

Завдання 11.3: Отримання доступу до вашого репозиторію віддалено по протоколу http 

Створіть новий клон репозиторію, використовуючи протокол http, як в: 

$ git clone https://ipaddress/my-remote-git-repo 

підставивши правильне значення замість ipaddress. 

Якщо у вас є партнер на іншій машині, або ви працюєте на двох машинах, спробуйте клонувати репозиторії один одного за допомогою цього методу. 

Для того, щоб це спрацювало, можливо, вам доведеться встановити http server. На машинах на основі RPM, можливо, доведеться виконати такі процедури:

$ sudo dnf install httpd 

а на системах на основі deb такі:

$ sudo apt-get install apache2 

а потім запустіть за допомогою:

$ sudo systemctl start httpd 

Не забудьте запустити:

$ git --bare update-server-info 

в каталозі проєкту перед спробою отримати доступ до репозиторію через https://. 

Для того, щоб це спрацювало, репозиторій має бути доступним через ваш вебсервер. Для простоти, ви можете розмістити його у /var/www/html (або у /var/www/git на системах на deb), або ви можете встановити посилання звідти на реальне місце розташування, як наприклад: 

$ sudo ln -s /tmp/my-remote-git-repo /var/www/html/my-remote-git-repo 
$ sudo ln -s /tmp/my-remote-git-repo /var/www/git/my-remote-git-repo 

Звичайно, ви можете розмістити його і в інших місцях, але ми не хочемо заглиблюватися в деталі конфігурації вебсервера. 

Завдання 11.4: Подання (push) змін до віддаленого репозиторію

Внесіть певні зміни до вашого локального репозиторію, які ми потім перенесемо до віддаленого. Ви можете просто додати файл, змінити один з них тощо.  

Спочатку спробуйте скористатися протоколом ssh. Виникли проблеми? 

Тепер спробуйте з протоколом git://. Щоб це спрацювало, вам доведеться налаштувати демон або за допомогою --enable=receive-pack для глобальної зміни для всіх репозиторіїв у вашій системі (що не дуже розумно), або за допомогою налаштування конфігураційного файлу або вашого репозиторія, як зазначалося раніше. 

Чи можете ви надсилати оновлення за протоколом https://?

