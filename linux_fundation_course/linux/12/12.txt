---------------------------Навчальні цілі---------------------------------

Після опанування цього розділу ви довідаєтесь про:

відображення та додавання вмісту файлу за допомогою cat і echo;
редагування та друк вмісту файлу за допомогою sed і awk;
пошук шаблонів за допомогою grep;
використання багатьох інших утиліт для роботи з файлами й текстом.

--------Інструменти командного рядка для роботи з текстовими файлами------

Незалежно від вашої ролі в Linux (системний адміністратор, розробник або користувач), вам часто потрібно переглядати й аналізувати текстові файли та / або витягувати з них дані. Це операції роботи з файлами. Користувачеві Linux важливо навчитися виконувати певні операції з файлами.

У більшості випадків такі операції з файлами виконують у командному рядку, що дозволяє користувачам виконувати завдання ефективніше, ніж за допомогою графічного інтерфейсу користувача. Крім того, командний рядок більше підходить для автоматизації часто виконуваних завдань.

Досвідчені системні адміністратори пишуть спеціалізовані сценарії для виконання повторюваних завдань, стандартизовані для кожного конкретного середовища. Пізніше ми розглянемо такі сценарії детальніше.

У цьому розділі ми зосередимося на утилітах, пов’язаних із файлами командного рядка та роботою із текстом.

-------------------------cat----------------------------------------------

cat (скорочення від concatenate) – це утиліта командного рядка Linux. Вона належить до тих утиліт, якими користуються найчастіше. Її часто використовують для читання та друку файлів, а також для простого перегляду вмісту файлу. Щоби переглянути файл, скористайтеся такою командою:

$ cat <filename>

Наприклад, cat readme.txt відобразить вміст readme.txt на терміналі. Однак основною метою cat часто є об’єднання (to concatenate) кількох файлів. Ви можете виконувати дії, наведені в таблиці, за допомогою cat.

Команда tac (це cat задом наперед) друкує рядки файлу у зворотному порядку. Кожен рядок залишається незмінним, але порядок рядків інвертується. Синтаксис tac точно такий же, як і для cat:

$ tac file
$ tac file1 file2 > newfile

Команда	Використання
cat file1 file2	Об’єднання кількох файлів і відображення результату; тобто за вмістом першого файлу відображається вміст другого файлу
cat file1 file2 > newfile	Об’єднання кількох файлів і збереження результату в новому файлі
cat file >> existingfile	Додавання файлу в кінець файлу, який існує
cat > file	Будь-які наступні введені рядки потраплятимуть у файл, доки не буде набрано CTRL+D
cat >> file	Усі наступні рядки додаються до файлу, доки не буде набрано CTRL+D

--------------------------Інтерактивне використання cat--------------------

cat можна використовувати для читання зі стандартного вводу (наприклад, вікна термінала), якщо файли не вказані. Ви можете використовувати оператор > для створення та додавання рядків у новий файл, а оператор >> – для додавання рядків (або файлів) до файлу, який існує. Ми згадували про це, коли говорили про те, як створювати файли без редактора.

Щоб створити новий файл, у командному рядку введіть cat > <ім’я файлу> і натисніть клавішу Enter.

Ця команда створює новий файл і чекає, поки користувач відредагує / введе текст. Після введення тексту натисніть CTRL+D на початку наступного рядка, щоби зберегти та вийти з редагування.

Інший спосіб: створення файлу на терміналі: cat > <ім’я файлу> << EOF. Буде створено новий файл, і ви зможете ввести дані. Щоби вийти, введіть EOF на початку рядка.

Зауважте, що EOF чутливий до регістру. Можна також використати інше слово, наприклад STOP.

-------------------Спробуйте самі: використання cat-------------------------

Виконайте вправу «Використання Cat».

Завдання для виконання:

Використовуючи cat, створіть файл під назвою test1, введіть «Line1» і збережіть його, натиснувши Ctrl+D.
Використовуючи cat, створіть файл під назвою test2, введіть «Line2» і збережіть його, натиснувши Ctrl+D.
Використовуючи cat, створіть файл під назвою test3, введіть «Line3» і збережіть його, натиснувши Ctrl+D.
Об’єднайте файли test1 і test2 у файл під назвою newtest.
Перегляньте вміст newtest, використовуючи cat.
Додайте файл test3 у кінці newtest.
Перегляньте вміст найновішого файлу за допомогою cat.
Додайте текст «Line4» до newtest.
Перегляньте вміст найновішого файлу за допомогою cat.

-------------------------------echo-----------------------------------------

echo просто відображає (відтворює) текст. Використовувати її просто:

$ echo string

echo можна використовувати для відображення рядка на стандартному виводі (тобто терміналі) або для розміщення в новому файлі (за допомогою оператора >) чи додавання до вже наявного файлу (за допомогою оператора >>).

Параметр -e разом із наступними перемикачами використовують для ввімкнення спеціальних символьних послідовностей, таких як символ нового рядка або горизонтальна табуляція:

\n означає новий рядок,
\t представляє горизонтальну вкладку.
echo особливо корисний для перегляду значень змінних середовища (вбудованих змінних оболонки). Наприклад, echo $USERNAME надрукує ім’я користувача, який увійшов до поточного термінала.

У таблиці наведено команди echo та їхнє використання:

Команда	Використання
echo string > newfile	Зазначений рядок розміщується в новому файлі
echo string >> existingfile	Зазначений рядок додається до кінця файлу, який уже існує
echo $variable	Відображається вміст зазначеної змінної середовища

-----------------------------Спробуйте самі. Використання ech--------------

Виконайте вправу використання echo.

Завдання для виконання:

Використовуючи echo, відобразіть рядок: "This is a test.". (Не змінюйте регістр і не додавайте додаткові символи, такі як лапки, крапка та кома.)
Перегляньте значення змінної середовища $SHELL.

--------------------------Робота з великими файлами---------------------------

Системним адміністраторам потрібно працювати з конфігураційними файлами, текстовими файлами, файлами документації та файлами журналів. Деякі з цих файлів можуть бути великими або ставати досить великими, оскільки з часом вони накопичують дані. Ці файли потребуватимуть як перегляду, так і адміністративного оновлення. У цьому розділі ви дізнаєтеся, як керувати такими великими файлами.

Наприклад, банківська система може підтримувати один простий великий файл журналу для запису подробиць усіх транзакцій банкомата за один день. Через атаку на систему безпеки або несправність адміністратор може бути змушений перевірити наявність деяких даних, переміщаючись у файлі. У таких випадках пряме відкриття файлу в редакторі спричинить проблеми через високе використання пам’яті, оскільки редактор зазвичай намагається спочатку прочитати весь файл у пам’ять. Однак можна використати less для перегляду вмісту такого великого файлу, прокручуючи вгору та вниз сторінку за сторінкою, без того, щоб система поміщала весь файл у пам’ять перед запуском. Це набагато швидше, ніж використання текстового редактора.

Перегляд якогось файлу (somefile) можна виконати, ввівши одну з двох команд:

$ less somefile
$ cat somefile | less

За замовчуванням довідкові сторінки надсилаються за допомогою команди less. Можливо, ви стикалися зі старішою утилітою more, яка має таку саму основну функцію, але менші можливості, тобто less означає more.

----------------------------head---------------------------------------------

head читає кілька перших рядків кожного названого файлу (10 за замовчуванням) і відображає їх у стандартному виводі. У параметрі можна вказати різну кількість рядків.

Наприклад, якщо ви хочете надрукувати перші 5 рядків з /etc/default/grub, скористайтеся такою командою:

$ head –n 5 /etc/default/grub

Ви також можете просто вказати:

head -5 /etc/default/grub

-----------------------tail--------------------------------------------------

tail друкує кілька останніх рядків кожного названого файлу та відображає їх у стандартному виводі. За замовчуванням відображається останні 10 рядків. Як варіант можна дати різну кількість рядків. tail особливо корисний, коли ви вирішуєте будь-яку проблему за допомогою файлів журналу, оскільки ви, ймовірно, хочете побачити останні рядки виводу.

Наприклад, щоб відобразити останні 15 рядків somefile.log, скористайтеся такою командою:

$ tail -n 15 somefile.log

Ви також можете вказати:

tail -15 somefile.log

Щоби постійно відстежувати нові результати у файлі журналу, що збільшується:

$ tail -f somefile.log

Ця команда постійно відображатиме будь-які нові рядки виводу в somefile.log, щойно вони з’являться. Таким чином ви можете контролювати будь-яку поточну діяльність, про яку повідомляється та записується.

--------------------------Перегляд стиснених файлів------------------------------

Під час роботи зі стисненими файлами не можна використовувати безпосередньо багато стандартних команд. Для багатьох поширених програм обробки файлів і тексту також є версія, спеціально розроблена для роботи безпосередньо зі стисненими файлами. Ці пов’язані утиліти мають літеру «z» перед їх назвою. Наприклад, у нас є такі службові програми, як zcat, zless, zdiff і zgrep.

Таблиця з переліком деяких команд родини z:

Команда	Опис
$ zcat compressed-file.txt.gz	Перегляд стисненого файлу
$ zless somefile.gz або
$ zmore somefile.gz	Посторінковий перегляд стисненого файлу
$ zgrep -i less somefile.gz	Пошук у стисненому файлі
$ zdiff file1.txt.gz file2.txt.gz	Порівняння двох стиснених файлів
Зауважте, що якщо ви запустите zless для нестисненого файлу, він усе одно працюватиме й ігноруватиме етап розпакування. Існують також еквівалентні службові програми для інших методів стиснення, окрім gzip (наприклад, bzcat і bzless пов’язані з bzip2, а xzcat і xzless – з xz).

------------------------Ознайомлення з sed і awk----------------------------------

Вміст файлу дуже часто повторно редагується та / або видаляється. Навчімося використовувати sed і awk, щоби легко виконувати такі операції.

Зауважте, що багато користувачів і адміністраторів Linux писатимуть сценарії, використовуючи комплексні мови сценаріїв (такі як Python і perl), а не sed і awk (і деякі інші утиліти, які ми обговоримо пізніше). Використання таких утиліт, безумовно, позитивне в більшості випадків; людина завжди має почуватися вільною у використанні інструментів, з якими має досвід. Однак описані тут утиліти набагато легші; вони використовують менше системних ресурсів і виконуються швидше. Бувають ситуації (наприклад, під час завантаження системи), коли багато часу витрачається на використання складніших інструментів, і система може бути навіть не здатна їх запустити. Отже, простіші інструменти завжди знадобляться.

---------------------------------sed-----------------------------------------------

sed – це потужний інструмент обробки тексту, одна з найстаріших, найперших і найпопулярніших утиліт UNIX. Її використовують для зміни вмісту файлу або вхідного потоку, зазвичай поміщаючи вміст у новий файл або вихідний потік. sed – це абревіатура від stream editor.

Вхідний потік
Робочий потік
Вихідний потік

sed може фільтрувати текст, а також виконувати заміни в потоках даних.

Дані із вхідного джерела / файлу (або потоку) беруться та переміщуються в робочий простір. Весь список операцій / модифікацій застосовується до даних у робочому просторі, а остаточний вміст переміщується в стандартний простір виводу (або потоку).

---------------------------Синтаксис команди sed-----------------------------------

Ви можете викликати sed за допомогою команд, подібних до перелічених у таблиці.

Команда	Використання
sed -e command <filename>	Вказати команди редагування в командному рядку, попрацювати з файлом і розмістити вивід стандартно (наприклад, терміналі)
sed -f scriptfile <filename>	Вказати файл сценарію, що містить команди sed, попрацювати з файлом і розмістити вивід стандартно
echo "I hate you" | sed s/hate/love/	Використовуйте sed для фільтрації стандартного вводу, розмістивши вивід стандартно
Параметр -e дозволяє вказувати кілька команд редагування одночасно в командному рядку. Це не потрібно, якщо у вас є лише одна операція.

------------------------------Основні операції sed---------------------------------

Тепер, коли ви знаєте, що за допомогою sed можна виконувати кілька операцій редагування та фільтрації, пояснимо деякі з них докладніше.

У таблиці пояснені деякі основні операції, де pattern – поточний рядок, а replace_string – новий рядок.

Команда	Використання
sed s/pattern/replace_string/ file	Замінює першу появу рядка в кожному рядку
sed s/pattern/replace_string/g file	Замінює всі появи рядка в кожному рядку
sed 1,3s/pattern/replace_string/g file	Замінює всі випадки рядка в діапазоні рядків
sed -i s/pattern/replace_string/g file	Зберігає зміни для заміни рядка в тому самому файлі
Використовуйте параметр -i обережно, оскільки дію не можна скасувати. Завжди безпечніше використовувати sed без параметра -i, а потім самостійно замінити файл, як показано в наступному прикладі:

$ sed s/pattern/replace_string/g file1 > file2

Наведена вище команда замінить усі появи pattern на replace_string у file1 та перемістить вміст у file2. Вміст file2 можна переглянути за допомогою cat file2. Якщо ви погодитесь, ви зможете перезаписати оригінальний файл за допомогою mv file2 file1.

Приклад: щоб конвертувати 01/02/… у JAN/FEB/…

sed -e ‘s/01/JAN/’ -e ‘s/02/FEB/’ -e ‘s/03/MAR/’ -e ‘s/04/APR/’ -e ‘s/05/MAY/ ‘ \
      -e ‘s/06/JUN/’ -e ‘s/07/LIP/’ -e ‘s/08/AUG/’ -e ‘s/09/SEP/’ -e ‘s/10/OCT/’ \
      -e ‘s/11/LIST/’ -e ‘s/12/DEC/’

----------------------------------awk------------------------------------------------

awk використовують для витягування та друку певного вмісту файлу, а також часто для створення звітів. Цю утиліту було створено в Bell Labs у 1970-х роках і названо на честь авторів – Альфреда Ахо, Пітера Вайнбергера та Браяна Кернігана (Alfred Aho, Peter Weinberger, and Brian Kernighan).

awk – це потужна утиліта та інтерпретована мова програмування. Її використовують для роботи з файлами даних, а також для отримання та обробки тексту. Вона добре працює з полями (містить окрему частину даних, фактично стовпець) і записами (набір полів, фактично рядок у файлі).

На знімку екрана показано, як викликається awk.

Як і у випадку із sed, короткі команди awk можна вказати безпосередньо в командному рядку, але більш складний сценарій можна зберегти у файлі, який можна вказати за допомогою параметра -f.

Команда	Використання
awk ‘command’ file	Вказує команду безпосередньо в командному рядку
awk -f scriptfile file	Вказує файл, який містить сценарій для виконання

--------------------------Основні операції awk---------------------------------------

У таблиці пояснені основні завдання, які можна виконувати за допомогою awk. Вхідний файл читається по одному рядку, і для кожного рядка awk відповідає заданому шаблону в заданому порядку та виконує запитану дію. Параметр -F дозволяє вказати певний символ-роздільник полів. Наприклад, файл /etc/passwd використовує знак «:» для розділення полів, тому параметр -F: використовується з файлом /etc/passwd.

Команда / дія в awk має бути взята в апострофи (або одинарні лапки «'»).

У таблиці подані приклади використання awk.

Команда	Використання
awk ‘{ print $0 }’ /etc/passwd	Роздрукувати весь файл
awk -F: ‘{ print $1 }’ /etc/passwd	Вивести перше поле (стовпець) кожного рядка, розділені двокрапкою
awk -F: ‘{ print $1 $7 }’ /etc/passwd	Вивести перше та сьоме поля кожного рядка

---------------------------Утиліти для роботи з файлами------------------------------

Під час роботи з файлами вам, можливо, доведеться сортувати дані та копіювати дані з одного місця в інше. Linux надає численні утиліти для роботи з файлами, які можна використовувати під час роботи з текстовими файлами. У цьому розділі ви дізнаєтеся про такі програми роботи з файлами:

sort
uniq
paste
join
split
Ви також дізнаєтеся про регулярні вирази та шаблони пошуку.

-----------------------------sort-----------------------------------------------------

sort використовують для перевпорядкування рядків текстового файлу в порядку зростання або спадання відповідно до ключа сортування. Ви також можете сортувати за певними полями (стовпцями) у файлі. Типовим ключем сортування є порядок символів ASCII (тобто, по суті, за алфавітом).

Cинтаксис	Використання
sort <filename>	Сортування рядків у вказаному файлі відповідно до символів на початку кожного рядка
cat file1 file2 | sort	Об’єднання двох файлів, потім сортування рядків і відображення виводу на терміналі
sort -r <filename>	Сортування рядків у зворотному порядку
sort -k 3 <filename>	Сортування рядків за третім полем кожного рядка замість початку
Приклади використання sort подано в таблиці. 

При використанні з параметром -u sort перевіряє унікальні значення після сортування записів (рядків). Це еквівалентно запуску uniq (обговоримо далі) на виводі sort.

--------------------------------uniq---------------------------------------------------

Команда uniq корисна для спрощення відображення тексту – вона видаляє повторювані послідовні рядки в текстовому файлі.

Оскільки uniq вимагає, щоби повторювані записи були послідовними, часто спочатку виконується сортування, а потім передається вивід у uniq; якщо сортування використовується з параметром -u, це можна зробити за один крок.

Щоби видалити повторювані записи з кількох файлів одночасно, скористайтеся командою

sort file1 file2 | uniq > file3

або

sort -u file1 file2 > file3

Щоби підрахувати кількість повторюваних записів, скористайтеся такою командою:

uniq -c filename

---------------------------------paste---------------------------------------------------

Припустімо, у вас є файл, у якому містяться повні імена всіх працівників, а в іншому файлі містяться їхні номери телефонів та ідентифікатори. Ви хочете створити новий файл, який містить усі дані, перелічені у трьох стовпцях: ім’я, ідентифікатор, номер телефону. Як це зробити ефективно, не витрачаючи надто багато часу?

paste можна використовувати для створення єдиного файлу, що містить усі три стовпці. Різні стовпці ідентифікуються на основі роздільників (інтервал, який використовується для розділення двох полів). Наприклад, роздільниками можуть бути пробіл, знак табуляції або знак абзацу. На рисунку у всіх файлах використано один пробіл як роздільник.

paste можна використовувати з такими параметрами:

-d роздільники, які вказують список роздільників, що використовуватимуться замість знака табуляції для розділення послідовних значень в одному рядку. Кожен роздільник використовується по черзі; коли список буде вичерпано, paste починається знову з першого роздільника;
-s, що змушує paste додавати дані послідовно, а не паралельно; тобто горизонтально, а не вертикально.

-----------------------------Використання paste---------------------------------------------

paste можна використовувати для об’єднання полів (таких як ім’я чи номер телефону) з різних файлів, а також для об’єднання рядків із кількох файлів. Наприклад, перший рядок file1 можна поєднати з першим рядком file2, другий рядок file1 можна поєднати з другим рядком file2 і т. д.

Щоб вставити вміст із двох файлів, можна виконати:

$ paste file1 file2

Синтаксис використання іншого роздільника такий:

$ paste -d, file1 file2

Стандартні роздільники: ‘space’, ‘tab’, ‘|’, ‘comma’ та ін.

------------------------------join--------------------------------------------------

Припустімо, у вас є два файли з кількома подібними стовпцями. Ви зберегли номери телефонів працівників у двох файлах: в одному – з їхніми іменами, в іншому – з їхніми прізвищами. Ви хочете об’єднати файли без повторення даних загальних стовпців. Як цього досягти?

Це завдання можна виконати за допомогою утиліти join, яка по суті є вдосконаленою версією paste. Вона спочатку перевіряє, чи мають файли спільні поля, наприклад імена чи номери телефонів, а потім об’єднує рядки у два файли на основі спільного поля.

----------------------------------Використання join----------------------------------

Щоб об’єднати два файли в спільне поле, у командному рядку введіть join file1 file2 і натисніть клавішу Enter.

Наприклад, спільне поле (тобто воно містить однакові значення) у файлах phonebook і cities – це номер телефону, а результат об’єднання цих двох файлів показано на знімку екрана.

--------------------------------split---------------------------------------------

split використовується для розбиття (або поділу) файлів (зазвичай відносно великих) на сегменти однакового розміру для полегшення перегляду та керування. За замовчуванням split розбиває файл на сегменти по 1000 рядків. Оригінальний файл не змінюється, просто створюється набір нових файлів із тим самим іменем і доданим префіксом. За замовчуванням додається префікс x. Щоби розділити файл на сегменти, використовуйте команду split infile.

Щоби розділити файл на сегменти за допомогою іншого префікса, скористайтеся командою split infile <Prefix>.

Використання split

Ми застосуємо split до файлу американо-англійського словника, у якому понад 99000 рядків:

$ wc -l american-english
99171 american-english

де ми використовували wc (підрахунок слів, обговоримо далі), щоби повідомити про кількість рядків у файлі. Потім введемо

$ split american-english dictionary

Це розділить файл на 100 сегментів однакового розміру під назвою dictionaryxx. Останній, звісно, буде трохи меншим.

----------------------Регулярні вирази та шаблони пошуку--------------------------------

Регулярні вирази – це текстові рядки, які використовують для відповідності певному шаблону або для пошуку певного місця, наприклад початку чи кінця рядка чи слова. Регулярні вирази можуть містити як звичайні символи, так і так звані метасимволи, такі як * і $.

Багато текстових редакторів і утиліт, таких як vi, sed, awk, find і grep, широко працюють з регулярними виразами. Деякі популярні комп’ютерні мови, такі як Perl, Python і Ruby, теж використовують регулярні вирази. Це досить складна тема, і про регулярні вирази написані цілі книги, тому ми обмежимося загальною інформацією про них.

Регулярні вирази відрізняються від символів підстановки (або метасимволів), які використовують для порівняння імен файлів у командних оболонках, таких як bash (були розглянуті в розділі 7 «Операції командного рядка»).

У таблиці наведено шаблони пошуку та їх використання.

Шаблон пошуку	Використання
. (крапка)	Позначає будь-який один символ
a|z	Порівнює a або z
$	Позначає кінець рядка
^	Позначає початок рядка
*	Позначає попередній елемент 0 або більше разів

---------------------------Використання регулярних виразів і шаблонів пошуку--------------------

Розглянемо речення: the quick brown fox jumped over the lazy dog.

У таблиці подано деякі шаблони, які можна застосувати до цього речення.

Команда	Використання
a..	Відповідає azy
b.|j.	Відповідає як br, так і ju
..$	Відповідає og
l.*	Відповідає lazy dog
l.*y	Відповідає lazy
the.*	Відповідає всьому реченню

--------------------------------Лабораторна робота 13.2. Синтаксичний аналіз файлів за допомогою awk (і sort, і uniq)------------------

Згенеруйте стовпець, що містить унікальний список усіх оболонок, які використовуються для користувачів у /etc/passwd.

Можливо, вам потрібно переглянути довідкову сторінку для /etc/passwd:

student:/tmp> man 5 passwd

Яке поле в /etc/passwd містить оболонку облікового запису за замовчуванням (інтерпретатор команд користувача)?

Як створити список унікальних записів (без повторів)?

Перегляньте запропонований розв’язок лабораторної роботи.

Лабораторна робота 13.2. Розв’язок

Поле в /etc/passwd, яке містить оболонку, має номер 7. Щоби відобразити поле, що містить оболонку, в /etc/passwd за допомогою awk і створити унікальний список, виконайте:

$ awk -F: ‘{print $7}’ /etc/passwd | sort -u

або

$ awk -F: ‘{print $7}’ /etc/passwd | sort | uniq

Наприклад:

$ awk -F: ‘{print $7}’ /etc/passwd | sort -u

/bin/bash
/bin/sync
/sbin/halt
/sbin/nologin
/sbin/shutdown

-----------------------------------------grep----------------------------------------

grep широко використовують як основний інструмент пошуку тексту. Він сканує файли на наявність заданих шаблонів і може використовуватися з регулярними виразами, а також простими рядками, як показано в таблиці.

Команда	Використання
grep [pattern] <filename>	Пошук шаблону у файлі та друк усіх відповідних рядків
grep -v [pattern] <filename>	Виведення всіх рядків, які не відповідають шаблону
grep [0-9] <filename>	Виведення всіх рядків, які містять числа від 0 до 9
grep -C 3 [pattern] <filename>	Виведення контексту рядків (зазначену кількість рядків над і під шаблоном) для відповідності шаблону. Тут кількість рядків указано 3

----------------------------------strings--------------------------------------------

strings використовують для вилучення всіх друкованих рядків символів, знайдених у файлі або файлах, наданих як аргументи. Це корисно для пошуку зрозумілого для людини вмісту, вбудованого в двійкові файли; для текстових файлів можна просто використовувати grep.

Наприклад, щоб знайти рядок my_string в електронній таблиці:

$ strings book1.xls | grep my_string

На знімку екрана показано пошук кількох програм, щоб побачити, які з них мають ліцензії GPL різних версій.

--------------------Лабораторна робота 13.3. Використання grep------------------------

Далі наведемо кілька прикладів того, що ви можете зробити за допомогою команди grep; ваше завдання – поекспериментувати з цими прикладами та розширити їх.

Знайдіть своє ім’я користувача у файлі /etc/passwd.
Знайдіть усі записи в /etc/services, які містять рядок ftp:
Обмежтеся тими, хто використовує протокол tcp.
Тепер обмежтеся тими, хто не використовує протокол tcp, виводячи номер рядка
Отримайте всі рядки, які починаються на ts або закінчуються на st.
Перегляньте запропонований розв’язок лабораторної роботи.

Використання grep

student:/tmp> grep student /etc/passwd
student:/tmp> grep ftp /etc/services
student:/tmp> grep ftp /etc/services | grep tcp
student:/tmp> grep -n ftp /etc/services | grep -v tcp
student:/tmp> grep -e ^ts -e st$ /etc/services 

------------------------------------tr-----------------------------------------

У цьому розділі ви дізнаєтесь про деякі додаткові текстові утиліти, які можна використовувати для виконання різноманітних дій із файлами Linux, наприклад, зміни регістру літер або визначення кількості слів, рядків і символів у файлі.

Утиліту tr використовують для перетворення вказаних символів на інші символи або для їх видалення. Загальний синтаксис такий:

$ tr [options] set1 [set2]

Елементи у квадратних дужках необов’язкові. tr потребує принаймні один аргумент і приймає максимум два. Перший, позначений у прикладі set1, містить список символів у тексті, які потрібно замінити або видалити. Другий, set2, містить список символів, які мають бути замінені на символи, перелічені в першому аргументі. Іноді ці набори потрібно взяти в апострофи (або одинарні лапки (‘)), щоб оболонка ігнорувала те, що вони означають щось особливе для оболонки. Зазвичай безпечно (і, можливо, будк обов’язково) взяти в одинарні лапки кожен набір, як ви побачите в прикладах нижче.

Наприклад, припустімо, що у вас є файл з іменем city, який містить кілька рядків тексту у змішаному регістрі. Щоби перевести всі символи нижнього регістру у верхній, у командному рядку введіть cat city | tr a-z A-Z і натисніть клавішу Enter.

Команда	Використання
tr abcdefghijklmnopqrstuvwxyz
ABCDEFGHIJKLMNOPQRSTUVWXYZ	Змінити регістр з нижнього на верхній
tr ‘{}’ ‘()’ < inputfile > outputfile	Перетворити фігурні дужки на круглі
echo "This is for testing" | tr [:space:] ‘\t’	Перетворити знак пробілу на знак табуляції
echo "This is for testing" | tr -s [:space:]	Стиснути повторення символів за допомогою -s
echo "the geek stuff" | tr -d ‘t’	Видалити вказані символи за допомогою параметра -d
echo "my username is 432234" | tr -cd [:digit:]	Доповнити набори за допомогою параметра -c
tr -cd [:print:] < file.txt	Видалити всі недруковані символи з файлу
tr -s ‘\n’ ‘ ‘ < file.txt	Об’єднати всі рядки у файлі в один рядок

--------------------------------------tee-------------------------------------------

tee бере вивід будь-якої команди та, надсилаючи його на стандартний вивід, також зберігає його у файлі. Інакше кажучи, він виділяє вихідний потік із команди: один потік відображається на стандартному виводі, а інший зберігається у файлі.

Наприклад, щоби переглянути вміст каталога на екрані та зберегти вихідні дані у файл, у командному рядку введіть ls -l | tee newfile і натисніть клавішу Enter.

Після введення cat newfile відобразиться вивід ls -l.

------------------------------------wc----------------------------------------------

wc (word count) підраховує кількість рядків, слів і символів у файлі або списку файлів. У таблиці подані варіанти параметрів.

Параметр	Опис
-l	Показує кількість рядків
-c	Показує кількість байтів
-w	Показує кількість слів
За замовчуванням усі три параметри активні.

Наприклад, щоби надрукувати лише кількість рядків, які містяться у файлі, введіть wc -l filename і натисніть клавішу Enter.

------------------------------------------cut--------------------------------------

cut використовують для роботи з файлами на основі стовпців. Вона призначена для вилучення певних стовпців. Типовим роздільником стовпців є знак табуляції (tab). Інший роздільник можна вказати як параметр команди.

Наприклад, щоби відобразити третій стовпець, розділений пробілом, у командному рядку введіть

ls -l | cut -d" " -f3

і натисніть клавішу Enter.

--------------------------------------Лабораторна робота 13.4. Використання tee----------------------------------

Утиліта tee дуже корисна для збереження копії виведених даних, поки ви спостерігаєте за їхнім створенням.

Виконайте таку команду, як створення списку каталога /etc:

student:/tmp> ls -l /etc

яка збереже результат у файлі та відобразить його на вашому терміналі.

Перегляньте запропонований розв’язок лабораторної роботи.

Лабораторна робота 13.4. Розв’язок

student:/tmp> ls -l /etc | tee /tmp/ls-output
student:/tmp> less /tmp/ls-output

total 2948
drwxr-xr-x.  3 root root     4096 Nov  3 07:27 abrt
-rw-r--r--.  1 root root       16 Jan 15  2015 adjtime
-rw-r--r--   1 root root     1518 Jun  7  2013 aliases
-rw-r--r--.  1 root root    12288 Nov  3 07:49 aliases.db
drwxr-xr-x.  2 root root     4096 Nov  3 07:26 alsa
drwxr-xr-x.  2 root root     4096 Jan 20 07:28 alternatives
-rw-------   1 root root      541 Feb 23  2016 anacrontab
-rw-r--r--   1 root root       55 Jun  6  2016 asound.conf
-rw-r--r--   1 root root        1 May 23  2016 at.deny
drwxr-xr-x.  2 root root     4096 Nov  3 07:26 at-spi2
drwxr-x---.  3 root root     4096 Nov  3 07:26 audisp
drwxr-x---.  3 root root     4096 Nov  3 07:26 audit
drwxr-xr-x.  4 root root     4096 Nov  3 07:32 avahi
drwxr-xr-x.  2 root root     4096 Jan 18 06:59 bash_completion.d
-rw-r--r--   1 root root     2853 May  4  2016 bashrc
drwxr-xr-x.  2 root root     4096 Nov  7 10:20 binfmt.d
drwxr-xr-x   2 root root     4096 Nov  3 07:26 bluetooth
drwxr-xr-x.  2 root root     4096 Apr  9  2015 bonobo-activation
drwxr-xr-x   2 root root    12288 Nov  3 07:26 brltty
-rw-r--r--   1 root root    21929 May  6  2016 brltty.conf
-rw-r--r--   1 root root      676 Jun 23  2016 cgconfig.conf

-------------------------------Лабораторна робота 13.5. Використання wc-----------------------------------

За допомогою wc (word count) дізнайтеся, скільки рядків, слів і символів міститься у всіх файлах у /var/log, які мають розширення .log.

Перегляньте запропонований розв’язок лабораторної роботи.

Лабораторна робота 13.5. Розв’язок

student:/tmp> wc /var/log/*.log

  325    2204   18114 /var/log/boot.log
     0       0       0 /var/log/pm-powersave.log
  3098   17871  125630 /var/log/systemtap.log
  5234  251967 4889056 /var/log/vbox-install.log
wc: /var/log/wpa_supplicant.log: Permission denied
  1313   15374   99968 /var/log/Xorg.0.log
   150    1185    8520 /var/log/Xorg.1.log
   318    2851   20868 /var/log/Xorg.9.log
wc: /var/log/yum.log: Permission denied
 10438  291452 5162156 total

 ------------------------------------Короткий зміст розділу--------------------------------------

 Ви завершили розділ 13. Підсумуймо основні розглянуті поняття:

Командний рядок часто дозволяє користувачам виконувати завдання ефективніше, ніж графічний інтерфейс.
cat, скорочення від concatenate, використовують для читання, друку та об’єднання файлів.
echo відображає рядок тексту або на стандартному виводі, або для розміщення у файлі.
sed – це популярний редактор потоків, який часто використовують для фільтрації та виконання замін у файлах і потоках текстових даних.
awk – це інтерпретована мова програмування, яку зазвичай використовують як інструмент вилучення даних і звітування.
sort використовують для сортування текстових файлів і вихідних потоків у порядку зростання або спадання.
uniq усуває повторювані записи в текстовому файлі.
paste поєднує поля з різних файлів; також може витягувати та комбінувати рядки з кількох джерел.
join поєднує рядки з двох файлів на основі спільного поля. Це працює, лише якщо файли мають спільне поле.
split розбиває великий файл на сегменти однакового розміру.
Регулярні вирази – це текстові рядки, які використовують для порівняння шаблонів. Шаблон можна використовувати для пошуку певного місця, наприклад початку або кінця рядка чи слова.
grep шукає шаблони в текстових файлах і потоках даних; її можна використовувати з регулярними виразами.
tr змінює символи, копіює стандартний ввід у стандартний вивід і обробляє спеціальні символи.
tee зберігає копію стандартного виводу у файл, продовжуючи відображатися на терміналі.
wc (word count) відображає кількість рядків, слів і символів у файлі або групі файлів.
cut витягує стовпці з файлу.
less переглядає файли, сторінку за раз і дозволяє прокручувати в обох напрямках.
head відображає кілька перших рядків файлу або потоку даних на стандартному виводі. За замовчуванням відображається 10 рядків.
tail відображає кілька останніх рядків файлу або потоку даних на стандартному виводі. За замовчуванням відображається 10 рядків.
strings витягує рядки символів для друку з бінарних файлів.
Родину команд z використовують для читання та роботи зі стиснениними файлами.