-------------------------Навчальні цілі---------------------------------

Після опанування цього розділу ви зможете:

створювати та редагувати файли за допомогою доступних текстових редакторів Linux;
використовувати nano – простий текстовий редактор;
використовувати gedit – простий графічний редактор;
використовувати vi та emacs – два розширені редактори з текстовим і графічним інтерфейсами.

-------------------Огляд текстових редакторів у Linux-------------------

Колись вам доведеться вручну редагувати текстові файли. Можливо, ви будете писати електронний лист в автономному режимі чи сценарій, який використовуватиметься для bash або інших інтерпретаторів команд, будете змінювати конфігураційний файл системи чи програми або будете розробляти вихідний код для мови програмування, наприклад C, Python або Java.

Адміністратори Linux можуть обійти увагою текстовий редактор і використовувати графічні утиліти для створення та зміни конфігураційних файлів системи. Однак це може обмежити ваші можливості і може потребувати більше часу та зусиль, ніж безпосереднє використання текстового редактора. Зверніть увагу, що програми для обробки текстів (зокрема й ті, що належать до звичайних пакетів офісних програм) – це насправді не прості текстові редактори; вони дають багато додаткової (зазвичай невидимої) інформації про форматування, яка, ймовірно, зробить конфігураційні файли адміністрування системи непридатними для їхнього призначення. Тому уміння користуватися одним або кількома текстовими редакторами – це дійсно важлива навичка для Linux.

Ви вже зрозуміли, що в Linux багато можливостей. Що стосується текстових редакторів, існує багато варіантів, від досить простих до дуже складних, зокрема:

nano;
gedit;
vi;
emacs.
У цьому розділі ми спочатку дізнаємося про редактори nano та gedit, які відносно прості та легкі у вивченні, а потім про більш складні vi та emacs. Та спершу розгляньмо деякі випадки, коли редактор не потрібен.

-------------------Створення файлів без використання редактора----------

Іноді вам треба створити короткий файл і не хочеться викликати повнотекстовий редактор. Це може бути корисно під час використання зі сценаріїв, навіть під час створення довших файлів. Ви також без сумніву захочете використовувати цей метод, коли почнете читати наступні розділи, де будуть описані сценарії оболонки.

Якщо ви хочете створити файл без використання редактора, є два стандартні способи створити його з командного рядка та заповнити контентом.

Перший – повторне використання echo:

$ echo line one > myfile
$ echo line two >> myfile
$ echo line three >> myfile

Зауважте, що один знак більше (>) надсилатиме вихідні дані команди у файл, а два знаки більше (>>) додаватимуть новий результат до наявного файлу.

Другий спосіб – використовувати cat у поєднанні з перенаправленням:

$ cat << EOF > myfile
> line one
> line two
> line three
> EOF
$

Обидва способи створюють файл із такими рядками:

line one
line two
line three

Обидва способи надзвичайно корисні, коли використовуються сценаріями.

-----------------------------------nano і gedit------------------------------------

Деякими текстовими редакторами можна навчитися користуватися інтуїтивно: вони не потребують особливого досвіду для навчання. Причому вони досить ефективні. Особливо простий у використанні текстовий термінальний редактор nano. Просто викличте nano, вказавши ім’я файлу як аргумент. Уся потрібна допомога відображатиметься внизу екрана, і ви зможете продовжити без проблем.

Графічний редактор gedit – частина робочого столу GNOME (kwrite підтримується та асоціюється з KDE). Редактори gedit і kwrite дуже прості у використанні та надзвичайно потужні. Їх також легко налаштувати. Вони дуже схожі на «Блокнот» у Windows. Інші варіанти, наприклад, kate, також підтримуються KDE.

---------------------------------nano-----------------------------------------------

Текстовий редактор nano простий у використанні, і для його вивчення потрібно дуже мало зусиль. Щоби відкрити файл, введіть nano <filename> і натисніть Enter. Якщо файлу не існує, його буде створено.

У nano є дворядкова панель швидкого доступу внизу екрана, у якій є перелік доступних команд. Ось деякі з них:

CTRL+G – відобразити екран довідки;
CTRL+O – записати у файл;
CTRL+X – вийти з файлу;
CTRL+R – вставити вміст з іншого файлу в поточний буфер;
CTRL+C – показати положення курсора.

-------------------------------Графічний редактор gedit-----------------------------

gedit (вимовляється джі-едіт) – це простий у використанні графічний редактор, який можна запускати лише в середовищі графічного робочого столу. Він візуально дуже схожий на текстовий редактор «Блокнот» у Windows, але насправді набагато потужніший і його легко конфігурувати. Він також має велику кількість доступних плагінів для розширення його можливостей.

Щоби відкрити новий файл, знайдіть програму в меню робочого столу або в командному рядку введіть gedit <filename>. Якщо файлу не існує, його буде створено.

Користуватися gedit досить просто, це не потребує довгого навчання. Його інтерфейс складається зі знайомих елементів.

-----------------------------Лабораторна робота 11.1. Використання nano-------------

З допомогою редактора nano створимо файл із назвою myname.txt, у якому в першому рядку буде ваше ім’я, а в останньому – поточна дата. Щоб це зробити:

Запустіть nano, ввівши nano myfile.txt.
Додайте своє ім’я в першому рядку файлу.
Додайте дату в останній рядок файлу.
Закрийте файл.

З допомогою редактора gedit створимо або повторно використаємо файл із назвою myname.txt, який містить адресу вашої вулиці у другому рядку та назву вашого міста в останньому рядку:

Запустіть gedit, ввівши gedit myfile.txt.
Додайте свою адресу у другому рядку файлу.
Додайте назву свого міста в останній рядок файлу.
Закрийте файл.

-------------------------------------vi та emacs--------------------------------------------

Розробники й адміністратори, які мають досвід роботи в UNIX-подібних системах, майже завжди використовують один із двох давніх текстових редакторів – vi та emacs. Обидва наявні або легко доступні у всіх дистрибутивах і повністю сумісні з версіями, доступними в інших операційних системах.

І vi, і emacs мають базову суто текстову форму, яка може працювати в неграфічному середовищі. Вони також мають одну або кілька форм графічного інтерфейсу з розширеними можливостями; можуть бути зручнішими для менш досвідченого користувача. Хоча vi та emacs можуть бути надто хитромудрими для нових користувачів, проте вони стануть надзвичайно ефективними, коли ви навчитеся ними користуватися.

Ви маєте знати, що протиборство між досвідченими користувачами через те, який редактор кращий, може бути досить напруженим і часто описується як священна війна.

------------------------------------Вступ до vi---------------------------------------------

Зазвичай у вашій системі встановлюється програма vim (скорочення від Vi IMproved», яка має «псевдонім» vi (вимовляється як «ві-ай»).

Навіть якщо ви не бажаєте користуватися vi, добре ознайомтеся з ним: це стандартний інструмент, установлений майже на всіх дистрибутивах Linux. Адже справді бувають випадки, коли в системі немає іншого редактора.

GNOME розширює vi за допомогою дуже графічного інтерфейсу, відомого як gvim, а KDE пропонує kvim. Будь-який з них може бути легшим для початкового використання.

Під час використання vi всі команди слід вводити з клавіатури. Вам не потрібно постійно рухати руками, щоби скористатися вказівним пристроєм (наприклад, мишею або тачпадом), хіба що ви хочете робити це під час користування однією з графічних версій редактора.

---------------------------------vimtutor----------------------------------------------------

Введення vimtutor запускає короткий, але вичерпний посібник для тих, хто хоче вивчити свої перші команди vi. Незважаючи на те, що він складається зі вступу та лише семи уроків, він містить достатньо матеріалу, щоби зробити з вас досвідченого користувача vi, оскільки охоплює велику кількість команд. Вивчивши ці базові команди, ви зможете шукати нові хитрощі, щоби додати їх до свого списку команд vi, тому що завжди є оптимальніші способи робити щось у vi, набираючи менше тексту.

----------------------------------Режими у vi------------------------------------------------

vi працює у трьох режимах, як описано в таблиці нижче. Важливо не забувати, у якому режимі ви перебуваєте. Багато натискань клавіш і команд дадуть різний результат у різних режимах.

Режим	Особливість
Command	За замовчуванням vi запускається в режимі Command.
Кожна клавіша – це команда редактора.
Натискання клавіш інтерпретуються як команди, які можуть змінювати вміст файлу.
Insert	Введіть i, щоби перейти в режим Insert з режиму Command.
Режим Insert використовують для введення (вставки) тексту у файл.
Режим Insert позначається як «? INSERT ?» у нижній частині екрана.
Натисніть Esc, щоби вийти з режиму Insert і повернутися в режим Command.
Line	Введіть символ «:», щоби перейти в режим Line з режиму Command.
Кожен ключ – це зовнішня команда, включно з такими операціями, як запис вмісту файлу на диск або вихід.
Використовує команди редагування рядків, успадковані від старіших редакторів рядків. Більшістю цих команд більше не користуються. Деякі команди редагування рядка дуже потужні.
Натисніть Esc, щоби вийти з режиму Line і повернутися в режим Command.

----------------------------------Робота з файлами у vi------------------------------------

У таблиці описано найважливіші команди, якими користуються для запуску, виходу, читання та запису файлів у vi. Після всіх цих команд потрібно натиснути клавішу Enter.

Команда	Використання
vi myfile	Запуск редактора і редагування myfile
vi -r myfile	Запуск і редагування myfile у режимі відновлення після збою системи
:r file2	Читання у file2 та вставлення в поточну позицію
:w	Запис у файл
:w myfile	Виписування в myfile
:w! file2	Перезаписування file2
:x або :wq	Вихід і запис зміненого файлу
:q	Вихід
:q!	Вихід, навіть якщо зміни не було збережено

--------------------------------Зміна положення курсору у vi--------------------------------

У таблиці описано найважливіші клавіші та комбінації клавіш, якими користуються під час зміни позиції курсору у vi. Після введення команди в режимі Line (після двокрапки «:») потрібно натиснути клавішу Enter.

Клавіша	Використання
клавіші зі стрілками	Переміщення вгору, вниз, вліво і вправо
j або	Переміщення на один рядок униз
k	Переміщення на один рядок вище
h або Backspace	Переміщення на один символ ліворуч
l або пробіл	Переміщення на один символ праворуч
0	Перехід на початок рядка
$	Перехід у кінець рядка
w	Перехід до початку наступного слова
:0 або 1G	Перехід на початок файлу
:n або nG	Перехід до рядка n
:$ або G	Перехід до останнього рядка у файлі
CTRL+F або Page Down	Перехід на одну сторінку вперед
CTRL+B або Page Up	Переміщення на одну сторінку назад
^l	Оновлення та центрування екрана

-----------------------------Пошук тексту у vi------------------------------------------

У таблиці описано найважливіші команди, які використовуються під час пошуку тексту у vi. Після введення шаблону пошуку слід натиснути клавішу Enter.

Команда	Використання
/pattern	Пошук шаблону вперед
?pattern	Пошук шаблону назад
У таблиці описано найважливіші клавіші, якими користуються під час пошуку тексту у vi.

Клавіша	Використання
n	Перехід до наступного входження шаблону пошуку
N	Перехід до попереднього входження шаблону пошуку

-------------------------------Робота з текстом у vi-------------------------------------

У таблиці описано найважливіші клавіші, якими користуються під час зміни, додавання та видалення тексту у vi.

Клавіша	Використання
a	Додати текст після курсору; зупинитися – клавішею Esc
A	Додати текст у кінці поточного рядка; зупинитися – клавішею Esc
i	Вставити текст перед курсором; зупинитися – клавішою Esc
I	Вставити текст на початку поточного рядка; зупинитися – клавішею Esc
o	Почати новий рядок під поточним рядком, вставити туди текст; зупинитися – клавішею Esc
O	Почати новий рядок над поточним рядком, вставити туди текст; зупинитися – клавішею Esc
r	Замінити символ у поточній позиції
R	Замінити текст, починаючи з поточної позиції; зупинитися – клавішею Esc
x	Видалити символ у поточній позиції
Nx	Видалити N символів, починаючи з поточної позиції
dw	Видалити слово в поточній позиції
D	Видалити решту поточного рядка
dd	Видалити поточний рядок
Ndd або dNd	Видалити N рядків
u	Скасувати попередню операцію
yy	Витягнути (скопіювати) поточний рядок і помістити його в буфер
Nyy або yNy	Витягнути (скопіювати) N рядків і помістити в буфер
p	Вставте в поточну позицію витягнутий рядок або рядки з буфера

---------------------------Використання зовнішніх команд у vi--------------------------------

Введення команди sh відкриває зовнішню командну оболонку. Коли ви вийдете з оболонки, ви відновите сеанс редагування.

Введення символу «!» виконує команду з vi. Команда йде за знаком оклику. Ця техніка найкраще підходить для неінтерактивних команд, таких як : ! wc %. Введення цієї команди запустить команду wc (підрахунок слів) у файлі; символ % представляє файл, який зараз редагується.

--------------------------Ознайомлення з emacs----------------------------------------------

Редактор emacs – популярний конкурент vi. На відміну від vi, він не працює з режимами. emacs має широкі можливості налаштування та містить велику кількість функцій. Спочатку його було розроблено для використання на консолі, але незабаром його адаптували для роботи з графічним інтерфейсом користувача. Крім простого редагування тексту, emacs має багато інших можливостей. Наприклад, його можна використовувати для електронної пошти, налагодження тощо.

Замість різних режимів для команд і вставок, як у vi, в emacs треба користуватися клавішами CTRL і Meta (Alt або Esc) для спеціальних команд.

-----------------------------Робота з emacs----------------------------------------------

У таблиці наведено деякі найважливіші комбінації клавіш, якими користуються під час запуску, виходу, читання та запису файлів у emacs.

Клавіша	Використання
emacs myfile	Запуск emacs і редагування myfile
CTRL+x i	Вставлення запиту на файл у поточній позиції
CTRL+x s	Збереження всіх файлів
CTRL+x CTRL+w	Запис у файл із новою назвою, коли буде запропоновано
CTRL+x CTRL+s	Збереження поточного файлу
CTRL+x CTRL+c	Вихід після запиту зберегти будь-які змінені файли
Посібник з emacs корисний для початку вивчення основних команд. Він доступний в emacs, достатньо лише набрати CTRL+h (для довідки), а потім літеру t для виклику посібника.

------------------------------Зміна позицій курсору в emacs--------------------------------

У таблиці наведено деякі клавіші та комбінації клавіш, якими користуються для зміни позицій курсору в emacs.

Клавіша	Використання
клавіші зі стрілками	Переміщення вгору, вниз, вліво і вправо
CTRL+n	На один рядок униз
CTRL+p	На один рядок угору
CTRL+f	На один символ уперед / праворуч
CTRL+b	На один символ назад / ліворуч
CTRL+a	Перехід на початок рядка
CTRL+e	Перехід у кінець рядка
Meta+f	Перехід до початку наступного слова
Meta+b	Повернення до початку попереднього слова
Meta+<	Перехід на початок файлу
Meta+g+g+n	Перехід до рядка n (також можна використовувати «Esc-x Goto-line n»)
Meta+>	Перехід до кінця файлу
CTRL+v або Page Down	Перехід на одну сторінку вперед
Meta+v або Page Up	Перехід на одну сторінку назад
CTRL+l	Оновлення та центрування екрана

---------------------------------Пошук тексту в emacs----------------------------------------

У таблиці наведено комбінації клавіш, якими користуються для пошуку тексту в emacs.

Клавіша	Використання
CTRL+s	Пошук уперед для запропонованого шаблону або наступного шаблону
CTRL+r	Пошук шаблону в зворотному напрямку або пошук наступного шаблону

------------------------------Робота з текстом в emacs---------------------------------------

У таблиці наведено деякі комбінації клавіш, якими користуються для зміни, додавання та видалення тексту в emacs.

Клавіша	Використання
CTRL+o	Вставити порожній рядок
CTRL+d	Видалити символ у поточній позиції
CTRL+k	Видалити решту поточного рядка
CTRL+_	Скасувати попередню операцію
CTRL + (пробіл або CTRL+@)	Позначає початок виділеної області. Кінець буде в позиції курсора
CTRL+w	Видалити поточний позначений текст і записати його в буфер
CTRL+y	Вставити в поточне розташування курсору все, що було видалено

--------------------------------Лабораторна робота 11.3. Посібники з vi та emacs-----------------------------

Онлайн-посібників за тематикою використання основних доступних редакторів не бракує. Це один із прикладів інтерактивного посібника з vi.

Для emacs це так само просто, як запустити програму (вам навіть не потрібно вказувати назву файлу), а потім набрати Ctrl+h, а потім t. Це запустить вбудований посібник з emacs.

Знайдіть час ознайомитися з цими посібниками.

Лабораторна робота 11.4. Робота з vi

Вам потрібно буде навчитися працювати з одним із редакторів, широко доступних у системах Linux. У наступних лабораторних роботах ми зосередимося на vi, який є в кожній системі Linux і базові навички користування яким повинен мати кожен системний адміністратор.

Ми повинні виконати подібні вправи і для emacs, який також має широку базу користувачів і багато відданих шанувальників. Однак, враховуючи обмежений час, ми все одно рекомендуємо вам виконати ці лабораторні роботи як домашнє завдання, і, якщо у вас іще немає vi або emacs, використовуйте або nano, або gedit, або kedit, оскільки для цих простих редакторів майже не потрібне навчання.

Майте на увазі, що індивідуальні користувачі та адміністратори Linux мають свої вподобання. Наприклад, ваш автор вважає vi дуже заплутаним через його різні режими і ніколи не користується ним, якщо тільки не змушений цього робити. Можливо, причина, чому ми не створили лабораторних робіт для emacs, полягає в тому, що ваш автор вважає, що ним можна користуватися інтуїтивно та набагато легше!

Перегляньте запропоновані розв’язки лабораторної роботи.

Лабораторна робота 11.4. Ровз’язок. Навігація у vi

Якщо myfile не існує, створіть його та відкрийте, ввівши:
student:/tmp> vi myfile
Тепер у вас майже порожній екран із курсором у верхньому рядку. Спочатку ви перебуваєте в режимі Command.
Введіть a, щоб додати та перевести вас у вставки Insert.
Введіть речення:
The quick brown fox jumped over the lazy dog.
Якщо ви зробили помилку під час введення, ви можете виправити її, натиснувши клавішу Backspace.
Натисніть клавішу Esc. Курсор має стояти на крапці в кінці речення. На цьому етапі ви повернулися в режим Command.
Введіть a ще раз і натисніть Enter. Ви маєте бути на новому рядку під тим, який щойно ввели.
Введіть речення:
Nobody expects the Spanish Inquisition!
Натисніть клавішу Enter після введення символу «!».
На початку третього рядка введіть речення:
This is the third line.
Натисніть клавішу Esc. Тепер ви знову в режимі Command.
Тепер попереміщаймося в цьому файлі. Курсор має бути розташований над крапкою в кінці третього рядка, який ви щойно ввели. Тричі натисніть клавішу h. Натисніть клавішу k один раз. Над якою літерою тепер курсор? У якому слові?
(Курсор має бути над S у слові Spanish.)
Натисніть h чотири рази, а потім натисніть j. Яка літера під курсором? У якому слові?
(Курсор має бути над r у слові third.)
Натисніть k двічі, а потім l тричі. Над якою літерою курсор? У якому слові?
(Курсор має бути над х у слові fox.)
Тепер натисніть w вісім разів. Що ви помітили? Над якою літерою курсор? Над яким словом курсор?
(Ви маєте помітити, що тепер ви пропускаєте слова. Вісім натискань на w переведе вас із першого рядка у другий. Курсор тепер має бути над e у слові expects у другому рядку.)
Натисніть k, а потім клавішу $. Тепер натисніть b двічі. Над якою літерою курсор і в якому слові?
(Курсор має бути над літерою l у слові lazy.)
Ви повинні зрозуміти, як рухатися символ за символом, рядок за рядком і слово за словом як уперед, так і назад. Тепер натисніть клавішу 0 (нуль), а потім двічі клавішу w і тричі клавішу l. Над якою літерою курсор і в якому слові?
(Курсор має бути над літерою w у слові brown.)
Тепер натисніть e тричі. Над якою літерою курсор і в якому слові?
(Крсор має бути над d у слові jumped.)
Збережіть файл за допомогою команди :w. Ви використаєте цей файл у наступній вправі. Вийдіть з vi, ввівши команду :q. Ви також можете комбінувати ці команди, ввівши :wq, якщо хочете.
Сподіваємось, ця практика допоможе вам звикнути до того, як можна переміщувати курсор у файлі. Через деякий час ці клавіші швидко запам’ятаються.

Лабораторна робота 11.4. Розв’язок. Редагування у vi

Зручне переміщення у файлі важливе, однак сенс використання редактора полягає саме в редагуванні тексту.

Відредагуймо файл, який ви створили у попередній вправі. Введіть:
student:/tmp> vi myfile
Знайдіть слово the, натиснувши /, а потім натисніть Enter. Курсор має перейти до слова the у першому рядку між словами over і lazy.
Тепер шукайте наступне the. Натисніть клавішу n. Курсор мав перейти до слова the між expects і Spanish у другому рядку.
Змінимо the на а. Перемістивши курсор на t у слові the, введіть cw, щоби змінити слово. Ви помітили, що слово the зникло? Зараз ви в режимі Insert, тому просто введіть літеру «a». Можна ввести більше символів, якщо хочете. Наприклад, ви могли би змінити слово the на bright and shiny, якщо хочете. Коли ви закінчите змінювати слово the на слово a, натисніть клавішу Esc, щоби повернутися з режиму Insert у режим Command.
Натисніть клавішу L (Shift+L), щоби перейти до останнього рядка на екрані. У цьому короткому файлі це також останній рядок. Введіть dd. Що сталося?
(Тепер останній рядок має бути видалений.)
Натисніть клавішу H (Shift+H), щоби перейти до першого рядка на екрані. Знову-таки в цьому короткому файлі це також перший рядок файлу. Введіть "1P (подвійні лапки, 1 і P). Що відбувається? Ви розмістили вміст останнього видаленого елемента над поточним рядком. У цьому випадку ви розміщуєте колишній третій рядок над першим. Тепер ваш файл має такий вигляд:
This is the third line.
The quick brown fox jumped over the lazy dog.
Nobody expects a Spanish Inquisition!
Перемістіть курсор до слова third будь-яким способом, який вам подобається. Пам’ятайте, що це можна зробити кількома способами. Ви можете пересувати один символ за раз, пропускати слово за раз або шукати слово. Використовуйте команду cw, щоби змінити third на first. Не забудьте натиснути клавішу Esc, коли закінчите вводити слово, щоби вийти з режиму Insert.
Натисніть клавішу L, щоби перейти до останнього рядка на екрані. Витягнемо це в іменований буфер; скористаємося буфером c. Отже, щоби перемістити весь цей рядок у c, ми можемо ввести "cY. Рядок іще є? (Після витягування останнього рядка в буфер c останній рядок усе ще наявний. Витягування рядка просто копіює рядок.)
Натисніть клавішу H, щоби перейти до верхнього рядка на екрані. Розмістимо вміст c після першого рядка. Введіть "cp, щоби розмістити вміст іменованого буфера c після поточного рядка. Після розміщення витягнутого рядка після першого рядка ваш файл матиме такий вигляд:
This is the third line.
Nobody expects a Spanish Inquisition!
The quick brown fox jumped over the lazy dog.
Nobody expects a Spanish Inquisition!
Cпробуємо замінити команду, щоби змінити всі виводи слова на щось інше. Наприклад, замінимо всі малі літери слова the на великі – THE. Для цього вводимо команду :%s/the/THE/g. Помічаєте зміни? Після виконання команди заміни файл матиме такий вигляд:
This is THE third line.
Nobody expects a Spanish Inquisition!
The quick brown fox jumped over THE lazy dog.
Nobody expects a Spanish Inquisition!
Зауважте, що перше слово The на початку третього рядка не змінилося, оскільки воно не відповідало заданим умовам у команді заміни – усі малі літери.
Якщо подумати, THE, написане великими літерами, ніби натякає на те, що на вас кричать. Тому скасуймо останню зміну. Натисніть клавішу u (undo – скасування). Чи помітили ви, що цією командою були скасовані обидві зміни? Клавіша u скасує останню зміну, навіть якщо ця зміна вплинула на кілька місць у файлі.
І наостанок покращимо формат файлу, запустивши його за допомогою команди fmt. Введіть %!fmt. Відформатований файл матиме приблизно такий вигляд:
This is the first line. Nobody expects a Spanish Inquisition!
The quick brown fox jumped over the lazy dog.  Nobody expects a Spanish Inquisition!)
Вийдіть з vi. Ви можете зберегти зміни, записавши файл і потім вийшовши (:wq), або вийти без збереження (:q!).

Лабораторна робота 11.4. Розв’язок. Зовнішні команди у vi

Рано чи пізно трапиться ситуація, коли ви втратите інформацію, не встигнувши її зберегти.

Змініть дозволи для файлу, який ви редагували, на «лише читання» і відкрийте його для редагування, ввівши:
student:/tmp> chmod 444 myfile
student:/tmp> vi myfile
Видаліть перший рядок у файлі, ввівши dd. Ви можете побачити коротке повідомлення про помилку, але рядок буде видалено.
Спробуємо зберегти змінений файл. Введіть :w. Що сталося? Ви не можете зберегти цей файл, чи не так? Він доступний лише для читання (readonly). Ви мали отримати повідомлення в нижньому рядку екрана про помилку – про те, що файл доступний лише для читання.
Можливо, ви внесли багато змін у цей файл протягом тривалого сеансу редагування. Невже вся ваша важка праця втрачена? Ні!
У вас є кілька альтернатив. Перша полягає в тому, що ви можете перейти до оболонки зі свого редактора, змінити дозволи на файл, вийти з оболонки та повернутися до сеансу редагування, щоби зберегти файл. Зробіть це, ввівши :sh. Це має дати вам підказку оболонки. Тепер введіть команду:
student:/tmp> chmod 644 myfile
а потім вийдіть з оболонки за допомогою:
student:/tmp> exit
Ви маєте повернутися до сеансу редагування vi. Зазвичай ви бачите повідомлення про помилку, у якому сказано, що файл змінено. Натисніть O (Shift+O) для ОК. Тепер введіть :w! (зверніть увагу на !). Тепер файл має бути збережений.
Інший варіант – це записати вміст файлу в новий файл. Команда :w може прийняти як аргумент ім’я файлу, під яким ви хочете зберегти файл. Наприклад, ви можете ввести :w new_myfile, щоби зберегти всі зміни у файлі new_myfile.
Знати ці прийоми корисно, тому що колись під час роботи з Linux вони вам знадобляться. Попрацюйте з обома техніками, щоби відчути впевненість у своїх діях.

-----------------------------Короткий зміст розділу------------------------------------------

Ви закінчили розділ 11. Підсумуймо основні розглянуті поняття:

Текстові редактори (а не програми обробки текстів) досить часто використовують у Linux для таких завдань, як створення або зміна конфігураційних файлів системи, написання сценаріїв, розробки вихідного коду тощо.
nano – це простий у використанні текстовий редактор, який використовує підказки на екрані.
gedit – це графічний редактор, дуже схожий на «Блокнот» у Windows.
Редактор vi доступний у всіх системах Linux і широко використовується. Версії графічного розширення vi також широко доступні.
emacs доступний у всіх системах Linux як популярна альтернатива vi. emacs може підтримувати як графічний інтерфейс користувача, так і інтерфейс текстового режиму.
Щоб отримати доступ до посібника з vi, введіть vimtutor у вікні командного рядка.
Щоб отримати доступ до посібника з emacs, наберіть Ctrl-h, а потім t в emacs.
vi має три режими: Command, Insert і Line. emacs має лише один режим, однак потребує використання спеціальних клавіш, таких як Ctrl і Esc.
Обидва редактори використовують різні комбінації клавіш для виконання завдань. Ви можете витратити багато часу на їх освоєння, але, як тільки опануєте хоча б один редактор, це справить чималий ефект на вашу роботу.
