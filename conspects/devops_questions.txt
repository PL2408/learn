----------------------------------------------------1--------------------------------------------------------

Ви набираєте google.com у браузері. Розкажіть якомога детальніше, що відбувається в цей час?

DNS запит:
Браузер починає з DNS-запиту, який призначений для перетворення імені домену "google.com" на IP-адресу, яку можна розуміти комп'ютерами в Інтернеті. Для цього використовується сервер DNS.

Відправлення HTTP-запиту:
Отримавши IP-адресу, браузер формує HTTP-запит і відправляє його на сервер, що відповідає за Google.

TCP/IP з'єднання:
З'єднання між вашим комп'ютером і сервером Google встановлюється за допомогою протоколу TCP/IP, який дозволяє передачу даних між двома пристроями через Інтернет.

Веб-сервер Google відповідає:
Сервер Google отримує ваш запит і відправляє вам відповідь. Зазвичай це HTML-код, який браузер обробляє для відображення сторінки.

Отримання і відображення відповіді:
Браузер отримує відповідь від сервера Google і починає обробку отриманих даних. 

Вивантаження інших ресурсів:
Після отримання основного вмісту браузер може вивантажувати додаткові ресурси, такі як зображення, стилі, скрипти та інші, для повного відображення сторінки.

------------------------------------------------------ 2 -------------------------------------------------------

Як працює HTTPS?

HTTPS (Hypertext Transfer Protocol Secure) - це захищений протокол передачі даних через Інтернет, який використовує шифрування для забезпечення конфіденційності та цілісності передачі даних між користувачем і веб-сервером. Ось кілька кроків, як працює HTTPS:

Розпочаток з'єднання (Handshake):
Коли ви вводите адресу з префіксом "https://" у веб-браузері та натискати "Enter", ваш браузер встановлює з'єднання з веб-сервером, використовуючи протокол TLS (Transport Layer Security) або його попередника, SSL (Secure Sockets Layer).

SSL/TLS Handshake:
Процес "розмови" між браузером і веб-сервером включає в себе SSL/TLS handshake, під час якого визначається криптографічний алгоритм та виконується обмін ключами для створення захищеного з'єднання.

Встановлення шифрування:
Після обміну ключами браузер і веб-сервер домовляються про параметри шифрування, які будуть використовуватися для захищеної передачі даних. Це включає в себе використання симетричного шифру для шифрування фактичних даних та асиметричного шифру для обміну ключами та підтвердження ідентичності.

Передача даних:
Після встановлення захищеного з'єднання всі даними, які передаються між браузером і сервером, шифруються. Це забезпечує конфіденційність інформації та захищає її від перехоплення або модифікації під час передачі.

Цифровий підпис (Digital Signature):
Щоб забезпечити цілісність переданих даних, використовується цифровий підпис. Це дає змогу перевірити, чи були дані змінені під час передачі.

Сертифікат SSL/TLS:
Під час SSL/TLS handshake веб-сервер представляє свій цифровий сертифікат, який виданий довіреною стороною (Certificate Authority - CA). Цей сертифікат містить ключі для шифрування та інформацію про власника.

Відображення захищеного підключення:
Після успішного встановлення захищеного з'єднання браузер відображає символ "замка" або інший індикатор безпеки, щоб користувач міг бути впевнений в безпеці свого з'єднання з веб-сайтом.
HTTPS допомагає захищати конфіденційні дані користувачів, запобігає перехопленню та модифікації даних в мережі, а також гарантує, що користувач спілкується із справжнім веб-сайтом.

------------------------------------------------------- 3 ------------------------------------------------------------

Linux Опишіть загальну архітектуру операційної системи.


Лінукс — це сімейство відкритих операційних систем на основі ядра Linux. Основні компоненти архітектури Linux включають:

Ядро (Kernel):
Ядро є основною частиною операційної системи Linux. Воно відповідає за управління ресурсами комп'ютера, такими як процесор, пам'ять, введення/виведення, апаратний рівень комунікації з пристроями і управління системними викликами.

Системні бібліотеки (System Libraries):
Системні бібліотеки - це набір функцій і ресурсів, які використовуються програмами для виконання різних завдань. Вони включають бібліотеки C, які надають основні функції для взаємодії програм з ядром.

Оболонка (Shell):
Оболонка є командним інтерфейсом між користувачем і операційною системою. Користувач може взаємодіяти з системою, вводячи команди через оболонку. Різні оболонки, такі як Bash, Zsh, або Fish, можуть бути використані в Linux.

Системні програми та служби (System Utilities and Services):
Ці програми та служби включають в себе різноманітні утиліти для управління файловою системою, мережами, друкуванням, процесами та іншими аспектами операційної системи.

Файлова система (File System):
Файлова система визначає структуру і методи організації даних на зберігаючих пристроях. В Linux використовуються різні файлові системи, такі як ext4, XFS, Btrfs тощо.

Мережевий стек (Networking Stack):
Мережевий стек включає в себе протоколи і компоненти, які забезпечують мережеву взаємодію, включаючи TCP/IP стек, мережеві інтерфейси, маршрутизацію тощо.

Система керування пакетами (Package Management System):
Багато дистрибутивів Linux використовують систему керування пакетами для легкого встановлення, оновлення та видалення програм та компонентів операційної системи.

Інтерфейси користувача (User Interfaces):
Linux підтримує різні інтерфейси користувача, включаючи графічні інтерфейси, такі як GNOME або KDE, або текстові інтерфейси через термінал.

--------------------------------------------------------4--------------------------------------------------------------

Опишіть основне призначення операційної системи.

Операційна система (ОС) є основною програмною частиною комп'ютера, яка виконує ряд критичних завдань для забезпечення ефективності та взаємодії з іншими програмами та апаратним обладнанням.

--------------------------------------------------------5--------------------------------------------------------------

Навіщо потрібні файлові системи? Які існують?

Файлові системи є важливими для ефективного управління і організацією даних на зберігаючих пристроях, таких як жорсткі диски, SSD, USB-накопичувачі тощо. 

FAT (File Allocation Table):
Використовується для зберігання даних на USB-накопичувачах, картах пам'яті та інших портативних пристроях.

NTFS (New Technology File System):
Використовується в операційних системах Windows, надає підтримку розширених функцій, таких як права доступу та шифрування файлів.

ext4 (Fourth Extended File System):
Використовується в багатьох дистрибутивах Linux, надає високу продуктивність та надійність.

APFS (Apple File System):
Використовується в операційних системах macOS та iOS, має підтримку сучасних технологій, таких як шифрування та оптимізація для SSD.

exFAT (Extended File Allocation Table):
Розроблена для використання на зовнішніх пристроях, таких як флеш-накопичувачі та карти пам'яті, з підтримкою великих файлів та обсягів.

--------------------------------------------------------6--------------------------------------------------------------

У чому різниця між віртуалізацією і контейнеризацією?

Віртуалізація і контейнеризація - це дві різні концепції та технології, які дозволяють розділяти та ізолювати обчислювальні ресурси, але вони використовують різні підходи і мають свої особливості.

Рівень ізоляції:
Віртуалізація: Використовує гіпервізор для створення віртуальних машин, які емулюють апаратні засоби. Кожна віртуальна машина має свою операційну систему та завантажується як окремий фізичний комп'ютер.
Контейнеризація: Використовує контейнери для упаковки та ізоляції програм та їх залежностей. Контейнери використовують спільне ядро операційної системи та ресурси, тому вони легші та швидше, але менше ізольовані порівняно з віртуальними машинами.

Ресурси та продуктивність:
Віртуалізація: Більш велика вартість управління, більше обсягу зайнятого місця та більший обсяг системних ресурсів через дублювання операційних систем.
Контейнеризація: Легші, більш ефективні та швидкі, оскільки вони спільно використовують операційну систему та ресурси.

Швидкість та розмір:
Віртуалізація: Потребує більше часу для завантаження та більше дискового простору через повноцінну операційну систему для кожної віртуальної машини.
Контейнеризація: Швидше завантажується та використовує менше дискового простору, оскільки використовує спільні компоненти та обсяги операційної системи.

Витрати системних ресурсів:
Віртуалізація: Вимагає більше системних ресурсів через емуляцію апаратних засобів та запуск повноцінних операційних систем.
Контейнеризація: Вимагає менше системних ресурсів, оскільки використовує спільні компоненти операційної системи.

Ізоляція:
Віртуалізація: Має високий рівень ізоляції, оскільки кожна віртуальна машина має власну операційну систему та ізольовані процеси.
Контейнеризація: Має менший рівень ізоляції, оскільки використовує спільне ядро операційної системи, але вистачає для багатьох випадків використання.

---------------------------------------------------------7--------------------------------------------------------------

Яка файлова структура у Linux (UNIX) систем, що розташовані в /etc, /dev, /proc, /sys, /lib, /var (кілька директорій на вибір)?

/etc:
Цей каталог містить конфігураційні файли для системи та програм. В ньому можна знайти конфігураційні файли для мережі, служб, програм та багато іншого.

/dev:
В цьому каталозі знаходяться файлові представлення апаратного обладнання. Кожен пристрій, такий як жорсткий диск, принтер або мережевий адаптер, має файловий еквівалент в /dev.

/proc:
Цей каталог представляє віртуальну файлову систему, яка містить інформацію про поточні процеси та систему. Наприклад, інформація про пам'ять, процесор та інші системні ресурси доступна у файлах цього каталогу.

/sys:
Аналогічно до /proc, /sys також містить інформацію про конфігурацію ядра та управління ресурсами. Цей каталог дозволяє взаємодіяти з ядром через файлову систему.

/lib:
В цьому каталозі містяться системні бібліотеки, які використовуються програмами під час виконання. Ці бібліотеки містять функції та ресурси, які програми можуть викликати.

/var:
Каталог /var містить змінні дані, такі як лог-файли, поштові скриньки, бази даних та інші змінні файли. Це місце, де програми можуть зберігати дані, які можуть змінюватися під час роботи системи.

----------------------------------------------------------8--------------------------------------------------------------

Що таке Load Average?

Load Average (загальне завантаження) визначається як середнє значення кількості процесів, які чекають на виконання (знаходяться в черзі) протягом певного періоду часу. Це концепція, яка допомагає вимірювати завантаженість системи та її здатність обробляти завдання.

Load Average може бути представлене трьома значеннями, які відображають завантаженість системи протягом останніх 1, 5 і 15 хвилин. Ці значення, зазвичай позначені як "1-minute", "5-minute" та "15-minute" load averages, надають інформацію про те, як завантажена система в різні проміжки часу.

---------------------------------------------------------- 9 --------------------------------------------------------------

Що таке zombie process?

В контексті операційних систем, особливо UNIX-подібних, "зомбі-процес" (zombie process) - це процес, який завершив свою роботу, але його ідентифікатор процесу (PID) та деяка інша інформація все ще залишаються в системі, оскільки батьківський процес ще не взяв інформацію про завершення дитячого процесу.

Коли процес завершує свою роботу, він переходить у стан "зомбі", і основна інформація про нього залишається в таблиці процесів (Process Table). Зомбі-процес не виконує жодних операцій і вимагає мінімальних ресурсів системи, але його ідентифікатор процесу залишається видимим в системі до тих пір, поки його батьківський процес не отримає інформацію про завершення дитячого процесу.

Зомбі-процеси виникають тоді, коли батьківський процес не виконує обробку сигналу SIGCHLD (сигнал, який повідомляє батьківський процес про завершення одного з дитячих процесів). Якщо батьківський процес не обробляє цей сигнал, то зомбі-процеси можуть залишатися в системі, споживаючи обмежені ресурси. Тому важливо, щоб батьківські процеси регулярно обробляли сигнал SIGCHLD та видаляли інформацію про завершення своїх дитячих процесів.

--------------------------------------------------------- 10 ----------------------------------------------------------------

За допомогою чого можна зібрати інформацію про поточний стан процесора, пам’яті, диска, мережі?

Стан процесора: top або htop

Пам'ять: free, vmstat

Диск: df, du

Мережа: ifconfig , ip addr, netstat

Загальна інформація: uptime, ps

--------------------------------------------------------- 11 -----------------------------------------------------------------

Що таке swappiness?

Swappiness - це параметр в Linux, який визначає, наскільки система буде використовувати обмінний простір (swap space) в порівнянні з оперативною пам'яттю (RAM). Обмінний простір - це резервний простір на диску, який використовується системою для зберігання неактивних або рідко використовуваних сторінок пам'яті.

Параметр swappiness приймає значення від 0 до 100:

swappiness=0: Система використовуватиме обмінний простір тільки в тому випадку, коли вся оперативна пам'ять вже заповнена.

swappiness=100: Система буде намагатися якомога швидше видалити неактивні сторінки з оперативної пам'яті і перемістити їх в обмінний простір.

Значення по замовчуванню зазвичай становить 60. Змінюючи параметр swappiness, ви можете налаштувати, як часто і наскільки система буде використовувати обмінний простір.

--------------------------------------------------------- 12 -----------------------------------------------------------------

Що таке inode?

inode (інод) - це структура даних в файлових системах, яка містить інформацію про конкретний файл або каталог. Кожен файл або каталог в UNIX-подібній файловій системі має свій власний інод.

Інод містить метадані про файл, такі як:

Номер інода (inode number): Унікальний ідентифікатор, який однозначно ідентифікує інод в межах файлової системи.

Розмір файлу: Кількість байт, які займає файл.

Власник та група власника: Ідентифікатори користувача та групи, які володіють файлом чи каталогом.

Права доступу: Інформація про права доступу до файлу для власника, групи та інших користувачів.

Час створення, зміни та доступу: Інформація про часи, коли востаннє створено, змінено або отримано доступ до файлу.

Кількість жорстких посилань (hard links): Кількість імен (шляхів) до цього ж інода в файловій системі.

Вказівник на блоки даних: Інформація, яка вказує на блоки даних, що містять фактичний вміст файлу або каталогу.

Іноди допомагають файловій системі відстежувати та управляти файлами та каталогами. Завдяки унікальному номеру інода, файлова система може ефективно визначати розташування та властивості кожного файлу в системі.

---------------------------------------------------------- 13 -----------------------------------------------------------------

Розкажіть поетапно процес завантаження Linux від моменту ввімкнення живлення комп’ютера.

BIOS/UEFI:
Після увімкнення живлення комп'ютера відбувається перший етап завантаження в BIOS (Basic Input/Output System) або UEFI (Unified Extensible Firmware Interface), залежно від конфігурації вашої системи.
BIOS/UEFI проводить POST (Power-On Self-Test), перевіряючи апаратні компоненти комп'ютера.

Boot Loader:
BIOS/UEFI знаходить та завантажує загрузчик (boot loader). Загрузчик - це програма, яка завантажує операційну систему в пам'ять комп'ютера.
Декілька популярних загрузчиків для Linux - GRUB (GRand Unified Bootloader), LILO (Linux Loader) або systemd-boot.

Kernel:
Загрузчик завантажує ядро операційної системи в пам'ять. Ядро - це основна частина операційної системи, яка взаємодіє з апаратним забезпеченням та надає основні служби.

Init Process (SysVinit, Upstart, або systemd):
Після завантаження ядра виконується init-процес. У старших системах використовується SysVinit або Upstart, а в сучасних - systemd.
Init процес має PID (Process ID) 1 і відповідає за ініціалізацію системи та запуск служб.

User Space:
Після ініціалізації системи init-процес переходить до user space, і починають запускатися інші процеси та служби.
Запускаються служби, такі як syslogd, cron, sshd, інші.

Login Prompt (getty/agetty):
Після ініціалізації системи користувач бачить екран ініціалізації та може увійти в систему.
Процеси getty або agetty відповідають за вивід приглашення входу в систему і обробку введення користувача.

User Session:
Після входу в систему користувач запускає свою сеансову оболонку (shell), яка надає інтерфейс для взаємодії з системою.
Завантажуються додаткові процеси та середовище користувача.

--------------------------------------------------------14---------------------------------------------------------------------

Як перенаправити одночасно stderr та stdin?

Перенаправлення в один файл: command > file.log 2>&1

Перенаправлення в різні файли: command > stdout.log 2> stderr.log

Використання &> (доступне в деяких оболонках): command &> combined.log

-----------------------------------------------------15------------------------------------------------------------------------

Як вбити процес? Які є типи сигналів?

kill -15 PID
Сигнал завершення. Цей сигнал сповіщає процес, щоб він завершив роботу.

kill -9 PID
Сигнал негайного завершення. Цей сигнал призводить до негайного завершення процесу, і йому не можна відмовитися чи перехопити. 

kill -1 PID
игнал збою з'єднання (hangup). Часто використовується для перезавантаження або переконфігурування програм.

kill -2 PID
Сигнал преривання. Відправляється терміналом при натисканні Ctrl+C. Використовується для вручну переривання роботи процесу у терміналі.

kill -STOP PID  # Зупинити процес
kill -CONT PID  # Відновити виконання процесу

---------------------------------------------------16--------------------------------------------------------------------------
Що таке скрипт bash?

#!/bin/bash - "шебанг" походить від поєднання слів "sharp" (#) і "bang" (!), що розташовані в початку рядка. У широкому розумінні шебанг визначає інтерпретатор, який слід використовувати для виконання скрипта.


У Bash використовуються два основних типи змінних:

Рядкові (String) Змінні:
Рядкові змінні використовуються для зберігання текстової інформації. Вони можуть містити будь-який текст, включаючи літери, цифри та спеціальні символи.

my_string="Hello, World!"
echo $my_string

Числові (Numeric) Змінні:
Числові змінні використовуються для зберігання числових значень, таких як цілі або числа з плаваючою комою.

my_number=42
echo $my_number

---------------------------------------------------17--------------------------------------------------------------------------

Що виведуть команди:
1. echo ${hostname}; 
2. echo $(hostname);

echo ${hostname};
У цій команді ${hostname} виглядає як спроба звернутися до значення змінної з іменем "hostname". Однак в Bash для отримання ім'я хоста використовується змінна HOSTNAME, а не hostname.
Таким чином, ця команда виведе порожній рядок або значення неіснуючої змінної, оскільки Bash не знайде змінну з іменем "hostname".

echo $(hostname);
У цій команді $(hostname) використовує синтаксис підстановки команд, де внутрішня команда hostname виконується, і її вивід вставляється назад в команду echo.
Ця команда правильно виведе ім'я хоста, оскільки використовує правильну команду hostname для отримання цієї інформації.

---------------------------------------------------18---------------------------------------------------------------------------

Що таке модель OSI, TCP/IP?

TCP/IP (Transmission Control Protocol/Internet Protocol) - це набір протоколів, які визначають способи передачі даних в мережах комп'ютерів. Це стандартний стек протоколів для мережевої комунікації і використовується в Інтернеті та багатьох локальних мережах (LAN).

TCP/IP складається з двох основних протоколів:

Transmission Control Protocol (TCP):
TCP є протоколом забезпечення надійної доставки даних між двома пристроями. Він розділяє великі об'єми даних на пакети, надає кожному пакету унікальний номер послідовності, та перевіряє доставку пакетів між відправником та отримувачем. Якщо пакети втрачаються або не доходять, TCP здійснює повторну відправку.

Internet Protocol (IP):
IP відповідає за адресацію та маршрутизацію пакетів даних в мережі. Кожен пристрій у мережі має унікальну IP-адресу, яка використовується для визначення маршруту, за якими пакети даних будуть доставлені від відправника до отримувача.

---------------------------------------------------19---------------------------------------------------------------------------

Що таке фрагментація  IP-пакета  та чому вона відбувається?

Фрагментація IP-пакетів - це процес розбиття великих IP-пакетів на менші фрагменти для передачі через мережу, де максимальний розмір пакетів обмежений. Це може виникнути, коли пакет, який потрібно відправити, більший за максимальний допустимий розмір (Maximum Transmission Unit - MTU) на конкретному зв'язку мережі.

Різні розміри MTU: 
Різні мережеві технології можуть мати різні максимальні розміри передачі даних (MTU). Наприклад, етрнетова мережа може мати MTU 1500 байт, тоді як бездротова мережа може мати менший MTU. Якщо пакет, який потрібно відправити, більший за MTU мережі, його треба фрагментувати.

Перехід через різні мережеві сегменти: 
Коли пакет проходить через різні мережеві сегменти з різними MTU, відбувається фрагментація для забезпечення коректної передачі через кожен сегмент.

Процес фрагментації включає поділ IP-пакета на менші фрагменти, кожен з яких відправляється окремо, а отримувач повторно збирає їх у початковий пакет. Фрагментація використовує поля IP-заголовка, такі як "флаги фрагментації", "величина фрагмента" і "зміщення фрагмента", для вказівки порядку та збірки фрагментів.

Фрагментація може призводити до погіршення ефективності передачі даних та збільшення накладних витрат мережі, тому зазвичай намагаються уникати її використання, якщо це можливо.

---------------------------------------------------20---------------------------------------------------------------------------

Що таке колізія? Чому виникає?

У контексті мережевих технологій, колізія (collision) виникає, коли два або більше пристроїв одночасно спробують передати дані через спільний канал передачі (наприклад, етрнетовий сегмент). Колізії стали більш розповсюдженими у старших Ethernet-мережах, де використовувалася методологія CSMA/CD (Carrier Sense Multiple Access with Collision Detection).

В етрнет-мережах, якщо пристрій бажає відправити фрейм даних, він слухає канал і перевіряє, чи зайнятий канал чи ні. Якщо канал вільний, пристрій відправляє свій фрейм. Однак, якщо два пристрої вирішать відправити фрейм одночасно, може виникнути колізія, оскільки сигнали можуть перетинатися, і приймачі можуть отримувати неправильні дані.

Колізії виникають з кількох причин:

Багатопристроєве середовище: 
У мережах з багатьма пристроями на одному сегменті колізії стають більш ймовірними, оскільки кілька пристроїв може вирішити передати дані одночасно.

Погана конфігурація мережі: 
Недоліки в конфігурації мережі, такі як погано підібрана довжина кабелю, можуть призводити до великої кількості колізій.

Перевищення дозволеної довжини сегмента: 
Якщо довжина мережевого сегмента перевищує максимально допустиму для технології Ethernet, це може призводити до збільшення колізій.

Збої у мережевому обладнанні: 
Дефекти або несправності в мережевих картах, концентраторах (hub), кабелях можуть спричиняти колізії.

Сучасні мережі Ethernet використовують комутацію (switching), яка уникає прямих колізій і забезпечує кращий контроль над передачею даних, сприяючи покращенню швидкості та ефективності передачі

---------------------------------------------------21---------------------------------------------------------------------------

Що таке проксі?

Проксі (Proxy) — це проміжний сервер, який діє як посередник між клієнтом і службою, до якої клієнт намагається отримати доступ. Коли клієнт відправляє запит до сервера через проксі, цей останній виконує запит від імені клієнта і передає відповідь від сервера клієнту.

Основні функції проксі включають:

Фільтрація трафіку: 
Проксі може фільтрувати вхідний і вихідний трафік, блокуючи доступ до певних ресурсів або відсіюючи шкідливий контент.

Анонімізація та захист приватності: 
Проксі може ховати реальну IP-адресу клієнта від сервера, що дозволяє зберігати анонімність та захищати особисті дані.

Переадресація трафіку: 
Проксі може використовуватися для переадресації трафіку на інший сервер, що може бути корисним у випадках розподілу навантаження або забезпечення балансування навантаження.

Кешування: 
Проксі може зберігати копії раніше отриманих відповідей, що дозволяє прискорити доступ до ресурсів та зменшити навантаження на сервер.

Контроль доступу: 
Проксі може встановлювати правила для обмеження доступу до конкретних ресурсів чи служб на основі IP-адрес, часу доби, або інших параметрів.

Захист від атак: 
Проксі може виявляти та блокувати потенційно шкідливий трафік, такий як DDoS-атаки або спроби витіків інформації.

Логування та аналітика: 
Проксі може вести журнали активності та аналізувати трафік для виявлення аномальної діяльності.

Проксі використовуються в різноманітних сценаріях, включаючи корпоративні мережі, забезпечення безпеки, захист від атак, анонімність в Інтернеті та інше.

---------------------------------------------------21---------------------------------------------------------------------------

Що таке firewalls і навіщо вони потрібні?

Firewall (брандмауер) - це програма або пристрій, який контролює та фільтрує мережевий трафік між комп'ютером або мережею та зовнішнім середовищем Інтернету чи іншою мережею. Основна функція брандмауера - це захист від несанкціонованого доступу та моніторинг мережевого трафіку.

Основні завдання брандмауера включають:

Фільтрація трафіку: 
Брандмауер визначає, який мережевий трафік дозволений або блокований відповідно до заданих правил. Це може включати блокування конкретних IP-адрес, портів чи видів служб.

Захист від несанкціонованого доступу: 
Брандмауер встановлює перешкоди для несанкціонованого доступу до мережі чи системи, захищаючи від хакерських атак та небажаного вторгнення.

Контроль інтернет-доступу: 
Брандмауер може обмежувати доступ до конкретних веб-сайтів або служб для користувачів в мережі.

Логування та аудит: 
Брандмауер може вести журнали подій, які дозволяють адміністраторам моніторити та аналізувати мережевий трафік, виявляти атаки і вживати заходів безпеки.

Балансування навантаження:
Деякі брандмауери можуть використовуватися для розподілу мережевого трафіку для збалансування навантаження на різних шляхах.

VPN (віртуальна приватна мережа): 
Деякі брандмауери можуть підтримувати можливість налаштовувати віртуальні приватні мережі для безпечного з'єднання віддалених користувачів з центральною мережею.

Firewalls використовуються для забезпечення безпеки мереж та комп'ютерів, управління ресурсами, захисту конфіденційної інформації та запобігання різного роду мережевим загрозам.

---------------------------------------------------22---------------------------------------------------------------------------

Що таке NAT і навіщо він потрібен?

NAT (Network Address Translation) - це техніка, що використовується в мережевих пристроях, таких як маршрутизатори, для перетворення мережевих адрес. Основна мета NAT - це дозволити кільком пристроям в приватній локальній мережі використовувати один і той самий глобальний IP-адресу для з'єднання з Інтернетом.

---------------------------------------------------23---------------------------------------------------------------------------

Які типи IP-адрес ви знаєте?

Існують кілька типів IP-адрес, і основним розподілом є розділення на публічні та приватні IP-адреси. Ось деякі типи IP-адрес:

Публічний IP-адрес: 
Це унікальний IP-адрес, який призначений пристрою або мережі в Інтернеті. Вони глобально доступні та ідентифікуються у всій мережі Інтернет.

Приватний IP-адрес: 
Це IP-адрес, який призначений пристрою в приватній локальній мережі. Приватні IP-адреси зазвичай використовуються внутрішніми пристроями мережі і не доступні безпосередньо з Інтернету. Ці адреси зазвичай визначені в стандарті RFC 1918.

Динамічний IP-адрес: 
Це IP-адрес, який автоматично призначається пристрою при підключенні до мережі. Динамічні IP-адреси можуть змінюватися кожен раз, коли пристрій перепідключається до мережі.

Статичний IP-адрес: 
Це IP-адрес, який призначається пристрою і залишається постійним. Він не змінюється при кожному підключенні до мережі. Статичні IP-адреси зазвичай використовуються для серверів або інших пристроїв, які повинні бути завжди доступними за певною адресою.

Loopback-адрес (127.0.0.1): 
Це спеціальний IP-адрес, який вказує на той самий пристрій, на якому він використовується. Він зазвичай використовується для тестування мережевого стеку пристрою.

---------------------------------------------------24---------------------------------------------------------------------------

За яким портом і протоколом працюють Ping і Traceroute?

Ping та Traceroute використовують ICMP (Internet Control Message Protocol) для виконання своїх завдань.

Ping:

Протокол: 
ICMP (Internet Control Message Protocol).
Порт: ICMP не використовує порти. Замість того, щоб передавати дані через порти, ICMP включає в себе корисну інформацію в поле даних пакету.

Traceroute:

Протокол: 
ICMP (для відправлення сигналів) та UDP (User Datagram Protocol) або ICMP (для визначення шляху). У більшості випадків, Traceroute використовує UDP та вибирає випадковий порт.
Порт: В деяких реалізаціях Traceroute випадковим чином обирає порт, але зазвичай це буде високий непризначений порт. В інших випадках, де використовується ICMP, порт також не використовується.
Ping і Traceroute використовуються для визначення доступності пристроїв у мережі та визначення маршруту, яким проходять пакети від відправника до отримувача.

---------------------------------------------------25---------------------------------------------------------------------------